@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>KEYSTORE</PageTitle>

<HeadContent>
    <!-- Bootstrap Icons (ya tienes Bootstrap CSS en App.razor) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
</HeadContent>

<div>
    <NavMenu />
</div>

<div class="main-content">
    @Body
</div>

<script>
    // Funciones globales para el sitio
    window.siteUtils = {
        // Inicializar carousel de Bootstrap
        initializeCarousel: function(carouselId, options = {}) {
            const defaultOptions = {
                interval: 5000,
                wrap: true,
                touch: true,
                pause: 'hover',
                ride: 'carousel'
            };

            const finalOptions = { ...defaultOptions, ...options };

            const carouselElement = document.getElementById(carouselId);
            if (!carouselElement) {
                console.log(`Carousel ${carouselId} no encontrado`);
                return null;
            }

            try {
                // Destruir instancia existente si existe
                const existingCarousel = bootstrap.Carousel.getInstance(carouselElement);
                if (existingCarousel) {
                    existingCarousel.dispose();
                }

                // Crear nueva instancia
                const carousel = new bootstrap.Carousel(carouselElement, finalOptions);
                console.log(`Carousel ${carouselId} inicializado correctamente`);

                return carousel;
            } catch (error) {
                console.error(`Error inicializando carousel ${carouselId}:`, error);
                return null;
            }
        },

        // Control manual del carousel
        carouselControl: function(carouselId, direction) {
            const carousel = document.getElementById(carouselId);
            if (carousel) {
                const bsCarousel = bootstrap.Carousel.getInstance(carousel);
                if (bsCarousel) {
                    if (direction === 'prev') {
                        bsCarousel.prev();
                    } else if (direction === 'next') {
                        bsCarousel.next();
                    }
                }
            }
        },

        // Ir a slide específico
        carouselGoTo: function(carouselId, slideIndex) {
            const carousel = document.getElementById(carouselId);
            if (carousel) {
                const bsCarousel = bootstrap.Carousel.getInstance(carousel);
                if (bsCarousel) {
                    bsCarousel.to(slideIndex);
                }
            }
        }
    };

    // Función global para inicializar carousel desde Blazor
    window.initializeHeroCarousel = function() {
        console.log('Llamando a initializeHeroCarousel...');
        return window.siteUtils.initializeCarousel('heroCarousel', {
            interval: 5000,
            wrap: true,
            touch: true,
            pause: 'hover'
        });
    };

    // FUNCIÓN CORREGIDA PARA DROPDOWNS
    window.initDropdowns = function() {
        // Esperar a que Bootstrap esté completamente cargado
        if (typeof bootstrap === 'undefined') {
            console.error('Bootstrap no está cargado');
            return;
        }

        console.log('Inicializando dropdowns...');

        // Bootstrap 5 inicializa automáticamente los dropdowns con data-bs-toggle
        // Solo necesitamos verificar que estén funcionando
        const dropdownElements = document.querySelectorAll('[data-bs-toggle="dropdown"]');

        dropdownElements.forEach((element, index) => {
            try {
                // Verificar si ya tiene una instancia
                let dropdownInstance = bootstrap.Dropdown.getInstance(element);

                if (!dropdownInstance) {
                    // Crear nueva instancia si no existe
                    dropdownInstance = new bootstrap.Dropdown(element);
                    console.log(`Dropdown ${index + 1} inicializado manualmente`);
                } else {
                    console.log(`Dropdown ${index + 1} ya estaba inicializado`);
                }
            } catch (error) {
                console.error(`Error inicializando dropdown ${index + 1}:`, error);
            }
        });

        console.log(`Total dropdowns procesados: ${dropdownElements.length}`);
    };

    // Event listener para asegurar que Bootstrap esté cargado
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM cargado');
        console.log('Bootstrap disponible:', typeof bootstrap !== 'undefined');

        // Intentar inicializar dropdowns después de un delay
        setTimeout(() => {
            if (typeof bootstrap !== 'undefined') {
                console.log('Bootstrap confirmado, inicializando dropdowns automáticamente...');
                // Los dropdowns se inicializan automáticamente con data-bs-toggle
            }
        }, 500);
    });
</script>