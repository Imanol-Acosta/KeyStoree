@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using KeyStore
@using KeyStore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using KeyStore.Data
@using KeyStore.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg navbar-dark px-4 border-bottom border-white fixed-top navbar-transparent">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold fs-4" href="/">KEYSTORE</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMenu"
                aria-controls="navbarMenu" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarMenu">
            <ul class="navbar-nav mx-auto mb-3 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" activeClass="text-purple">Inicio</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Shop" activeClass="text-purple">Comprar</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/about" activeClass="text-purple">Sobre nosotros</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Contacto" activeClass="text-purple">Contacto</NavLink>
                </li>
            </ul>
            <div class="d-flex align-items-center gap-3">

                @if (isAdmin)
                {
                    <div class="dropdown">
                        <button class="btn btn-link text-white p-0 dropdown-toggle-custom"
                                type="button"
                                id="adminDropdown"
                                data-bs-toggle="dropdown"
                                aria-expanded="false"
                                title="Panel Admin">
                            <i class="bi bi-gear-fill fs-5"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-dark dropdown-menu-end" aria-labelledby="adminDropdown">
                            <li class="dropdown-header d-flex align-items-center">
                                <i class="bi bi-shield-lock-fill me-2"></i>
                                <span>Panel Admin</span>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <a class="dropdown-item d-flex align-items-center" href="/Productos/Crear">
                                    <i class="bi bi-plus-circle-fill me-2"></i>
                                    <span>Crear Producto</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item d-flex align-items-center" href="/admin/imagenes">
                                    <i class="bi bi-images me-2"></i>
                                    <span>Gestionar Imágenes</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item d-flex align-items-center" href="/admin/manage">
                                    <i class="bi bi-list-ul me-2"></i>
                                    <span>Gestionar Productos</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                }


                @if (!isAuthenticated)
                {
                    <NavLink href="/auth" class="position-relative text-white">
                        <i class="bi bi-person-circle fs-4"></i>
                    </NavLink>
                }

                <NavLink href="/cart" class="position-relative text-white">
                    <i class="bi bi-cart3 fs-4"></i>
                </NavLink>

                @if (isAuthenticated)
                {
                    <button @onclick="ShowLogoutModal" class="btn btn-link text-white p-0" style="text-decoration: none;" title="Cerrar Sesión">
                        <i class="bi bi-box-arrow-right fs-4"></i>
                    </button>
                }
            </div>
        </div>
    </div>
</nav>


@if (showLogoutModal)
{
    <div class="logout-modal-backdrop" @onclick="HideLogoutModal">
        <div class="logout-modal-container" @onclick:stopPropagation="true">
            <div class="logout-modal-header">
                <div class="logout-icon">
                    <svg fill="currentColor" viewBox="0 0 24 24">
                        <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z" />
                    </svg>
                </div>
                <h2 class="logout-title">Cerrar Sesión</h2>
                <p class="logout-subtitle">¿Estás seguro que deseas cerrar tu sesión?</p>
            </div>

            <div class="logout-modal-content">
                <p class="logout-message">
                    Tu sesión actual se cerrará y serás redirigido a la página principal.
                </p>
            </div>

            <div class="logout-modal-actions">
                <button type="button" class="logout-cancel-btn" @onclick="HideLogoutModal">
                    Cancelar
                </button>
                <button type="button" class="logout-confirm-btn" @onclick="ConfirmLogout" disabled="@isLoggingOut">
                    @if (isLoggingOut)
                    {
                        <span class="logout-spinner"></span>
                        <span>Cerrando...</span>
                    }
                    else
                    {
                        <span>Cerrar Sesión</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<style>
    /* Ocultar la flecha del dropdown ya que usamos nuestro propio ícono */
    .dropdown-toggle-custom::after {
        display: none !important;
    }

    /* Estilos personalizados para el dropdown */
    .dropdown-menu-dark {
        background-color: #212529;
        border: 1px solid #495057;
    }

    .dropdown-item:hover {
        background-color: #495057;
    }

    .dropdown-header {
        color: #ffffff !important;
        font-weight: bold;
    }
</style>

@code {
    private bool isAuthenticated = false;
    private bool isAdmin = false;
    private bool showLogoutModal = false;
    private bool isLoggingOut = false; 
    private AuthenticationState? authState;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("🔄 NavMenu: Inicializando...");


            AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;


            await UpdateAuthenticationState();
            isInitialized = true;

            Console.WriteLine($"✅ NavMenu inicializado: Auth={isAuthenticated}, Admin={isAdmin}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error inicializando NavMenu: {ex.Message}");
        }
    }



    private async void OnAuthenticationStateChanged(Task<AuthenticationState> authStateTask)
    {
        try
        {
            Console.WriteLine("🔄 NavMenu: Estado de autenticación cambió");


            await authStateTask;


            await UpdateAuthenticationState();


            StateHasChanged();

            Console.WriteLine($"🔄 NavMenu actualizado: Auth={isAuthenticated}, Admin={isAdmin}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error manejando cambio de autenticación: {ex.Message}");
        }
    }

    private async Task UpdateAuthenticationState()
    {
        try
        {
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var wasAuthenticated = isAuthenticated;
            var wasAdmin = isAdmin;

            isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;
            isAdmin = authState.User?.IsInRole("Admin") ?? false;

            // Log solo si hubo cambios
            if (isInitialized && (wasAuthenticated != isAuthenticated || wasAdmin != isAdmin))
            {
                Console.WriteLine($"📊 NavMenu: Cambio de estado detectado - Auth: {wasAuthenticated}→{isAuthenticated}, Admin: {wasAdmin}→{isAdmin}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error actualizando estado de autenticación: {ex.Message}");
            isAuthenticated = false;
            isAdmin = false;
        }
    }

    private void ShowLogoutModal()
    {
        showLogoutModal = true;
        StateHasChanged();
    }

    private void HideLogoutModal()
    {
        if (isLoggingOut) return; 
        showLogoutModal = false;
        StateHasChanged();
    }


    private async Task ConfirmLogout()
    {
        if (isLoggingOut) return;

        try
        {
            isLoggingOut = true;
            StateHasChanged();


            await Task.Delay(500);


            NavigationManager.NavigateTo("/logout", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error navegando a logout: {ex.Message}");

            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        finally
        {
            isLoggingOut = false;
            showLogoutModal = false;
        }
    }

    public void Dispose()
    {
        try
        {
            AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
            Console.WriteLine("🧹 NavMenu: Eventos desuscritos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error limpiando NavMenu: {ex.Message}");
        }
    }
}