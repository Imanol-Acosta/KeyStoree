@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using KeyStore.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="login-wrapper">
    <div class="login-card">
        <div class="login-header">
            <div class="user-icon">
                <svg fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
                </svg>
            </div>
            <h1 class="login-title">Member Login</h1>
            <p class="login-subtitle">Accede a tu cuenta de KeyStore</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <div class="form-group">
                <InputText @bind-Value="Input.Email"
                           id="Input.Email"
                           class="form-input"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="Email" />
                <ValidationMessage For="() => Input.Email" class="validation-message" />
            </div>

            <div class="form-group">
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="Input.Password"
                           class="form-input"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="Password" />
                <ValidationMessage For="() => Input.Password" class="validation-message" />
            </div>

            <div class="remember-section">
                <div class="remember-checkbox">
                    <InputCheckbox @bind-Value="Input.RememberMe" />
                    <label>Recordarme</label>
                </div>
                <a href="Account/ForgotPassword" class="forgot-link">¿Olvidaste tu contraseña?</a>
            </div>

            <button type="submit" class="login-button">LOGIN</button>
        </EditForm>

        <div class="signup-section">
            <span class="signup-text">¿No tienes cuenta?</span>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="signup-link">Crear cuenta →</a>
        </div>

        <div class="additional-links">
            <a href="Account/ResendEmailConfirmation">Reenviar confirmación</a>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Email o contraseña incorrectos.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}