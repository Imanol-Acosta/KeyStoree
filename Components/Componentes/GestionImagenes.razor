@page "/admin/imagenes"
@using Microsoft.EntityFrameworkCore
@using KeyStore.Data
@using KeyStore.Models
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Gestión de Imágenes - KeyStore</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-semibold text-primary">
                <i class="bi bi-images"></i> Gestión de Imágenes del Sitio
            </h3>
            <div class="d-flex gap-2">
                <a href="/" class="btn btn-outline-secondary">
                    <i class="bi bi-house"></i> Ver Sitio
                </a>
                <button class="btn btn-primary" @onclick="MostrarModalCrear">
                    <i class="bi bi-plus-circle"></i> Nueva Imagen
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert @(esError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                @mensaje
                <button type="button" class="btn-close" @onclick="() => mensaje = string.Empty"></button>
            </div>
        }

        @if (mostrarModalEliminar)
        {
            <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title text-danger">
                                <i class="bi bi-exclamation-triangle"></i> Confirmar Eliminación
                            </h5>
                            <button type="button" class="btn-close" @onclick="CerrarModalEliminar"></button>
                        </div>
                        <div class="modal-body">
                            @if (imagenAEliminar != null)
                            {
                                <p>¿Estás seguro de que deseas eliminar la imagen <strong>"@imagenAEliminar.Nombre"</strong>?</p>
                                <p class="text-muted small">
                                    <strong>Clave:</strong> @imagenAEliminar.Clave<br>
                                    Esta acción no se puede deshacer.
                                </p>

                                @if (imagenAEliminar.ImagenData != null && imagenAEliminar.ImagenData.Length > 0)
                                {
                                    <div class="text-center mt-3">
                                        <img src="data:@imagenAEliminar.TipoImagen;base64,@Convert.ToBase64String(imagenAEliminar.ImagenData)"
                                             alt="@imagenAEliminar.Nombre"
                                             class="img-fluid rounded shadow-sm"
                                             style="max-height: 150px; max-width: 100%; object-fit: cover;" />
                                    </div>
                                }
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">
                                Cancelar
                            </button>
                            <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@eliminando">
                                @if (eliminando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="row">
            @if (imagenes != null && imagenes.Any())
            {
                foreach (var imagen in imagenes.OrderBy(i => i.Clave))
                {
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div>
                                    <strong class="text-primary">@imagen.Clave</strong>
                                    @if (imagen.Activa)
                                    {
                                        <span class="badge bg-success ms-2">Activa</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary ms-2">Inactiva</span>
                                    }
                                </div>
                                <div class="position-relative">
                                    <button class="btn btn-sm btn-outline-secondary" type="button"
                                            @onclick="() => ToggleDropdown(imagen.Id)">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    @if (dropdownAbierto == imagen.Id)
                                    {
                                        <div class="dropdown-menu show position-absolute" style="top: 100%; right: 0; z-index: 1000;">
                                            <button class="dropdown-item" @onclick="() => { EditarImagen(imagen); dropdownAbierto = 0; }">
                                                <i class="bi bi-pencil"></i> Editar
                                            </button>
                                            <button class="dropdown-item text-danger" @onclick="() => { MostrarConfirmacionEliminar(imagen); dropdownAbierto = 0; }">
                                                <i class="bi bi-trash"></i> Eliminar
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="card-body text-center p-2">
                                @if (imagen.ImagenData != null && imagen.ImagenData.Length > 0)
                                {
                                    <img src="data:@imagen.TipoImagen;base64,@Convert.ToBase64String(imagen.ImagenData)"
                                         alt="@imagen.Nombre"
                                         class="img-fluid rounded shadow-sm"
                                         style="max-height: 200px; max-width: 100%; object-fit: cover;" />
                                }
                                else
                                {
                                    <div class="d-flex justify-content-center align-items-center bg-light rounded"
                                         style="height: 200px; border: 2px dashed #dee2e6;">
                                        <div class="text-center text-muted">
                                            <i class="bi bi-image display-4"></i>
                                            <p class="mt-2 mb-0">Sin imagen</p>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="card-footer bg-light">
                                <h6 class="card-title mb-1">@imagen.Nombre</h6>
                                @if (!string.IsNullOrEmpty(imagen.Descripcion))
                                {
                                    <p class="card-text text-muted small mb-2">@imagen.Descripcion</p>
                                }
                                <small class="text-muted">
                                    <i class="bi bi-calendar"></i> @imagen.FechaCreacion.ToString("dd/MM/yyyy")
                                </small>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="bi bi-images display-1 text-muted"></i>
                        <h4 class="mt-3">No hay imágenes configuradas</h4>
                        <p class="text-muted">Agrega imágenes para personalizar tu sitio</p>
                        <button class="btn btn-primary" @onclick="MostrarModalCrear">
                            <i class="bi bi-plus-circle"></i> Agregar Primera Imagen
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (mostrarModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <EditForm Model="imagenActual" OnValidSubmit="GuardarImagen">
                        <DataAnnotationsValidator />

                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="bi bi-image"></i>
                                @(imagenActual.Id == 0 ? "Nueva Imagen" : "Editar Imagen")
                            </h5>
                            <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                        </div>

                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Clave *</label>
                                        <InputSelect class="form-select" @bind-Value="imagenActual.Clave" disabled="@(imagenActual.Id != 0)">
                                            <option value="">-- Selecciona una clave --</option>
                                            <option value="hero-keyboard">Hero - Teclado Principal</option>
                                            <option value="about-image">About Us - Setup Gaming</option>
                                            <option value="product-1">Producto Destacado 1</option>
                                            <option value="product-2">Producto Destacado 2</option>
                                            <option value="product-3">Producto Destacado 3</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => imagenActual.Clave)" />
                                        @if (imagenActual.Id != 0)
                                        {
                                            <small class="text-muted">La clave no se puede modificar una vez creada</small>
                                        }
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Nombre *</label>
                                        <InputText class="form-control" @bind-Value="imagenActual.Nombre" placeholder="Nombre descriptivo" />
                                        <ValidationMessage For="@(() => imagenActual.Nombre)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Descripción</label>
                                        <InputTextArea class="form-control" rows="3" @bind-Value="imagenActual.Descripcion"
                                                       placeholder="Descripción opcional..." />
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Ancho (px)</label>
                                                <InputNumber class="form-control" @bind-Value="imagenActual.Ancho" placeholder="Auto" />
                                                <small class="text-muted">Dejar vacío para tamaño automático</small>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Alto (px)</label>
                                                <InputNumber class="form-control" @bind-Value="imagenActual.Alto" placeholder="Auto" />
                                                <small class="text-muted">Dejar vacío para tamaño automático</small>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Ajuste de imagen</label>
                                        <InputSelect class="form-select" @bind-Value="imagenActual.ObjectFit">
                                            <option value="cover">Cover (llenar contenedor)</option>
                                            <option value="contain">Contain (imagen completa)</option>
                                            <option value="fill">Fill (estirar)</option>
                                            <option value="scale-down">Scale Down (reducir si es necesario)</option>
                                            <option value="none">None (tamaño original)</option>
                                        </InputSelect>
                                        <small class="text-muted">Cómo se ajusta la imagen en su contenedor</small>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input" @bind-Value="imagenActual.OcultarFondo" />
                                            <label class="form-check-label">Ocultar fondo/contenedor</label>
                                            <small class="form-text text-muted d-block">Oculta el cuadro de fondo gris cuando no hay imagen</small>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input" @bind-Value="imagenActual.Activa" />
                                            <label class="form-check-label">Imagen activa</label>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Imagen</label>
                                        @if (imagenActual.ImagenData != null && imagenActual.ImagenData.Length > 0)
                                        {
                                            <div class="mb-3">
                                                <img src="data:@imagenActual.TipoImagen;base64,@Convert.ToBase64String(imagenActual.ImagenData)"
                                                     alt="Preview"
                                                     class="img-fluid rounded shadow-sm border"
                                                     style="max-height: 200px; width: 100%; object-fit: cover;" />
                                                <button type="button" class="btn btn-outline-danger btn-sm mt-2 w-100"
                                                        @onclick="EliminarImagenActual">
                                                    <i class="bi bi-trash"></i> Eliminar Imagen
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex justify-content-center align-items-center bg-light rounded mb-3"
                                                 style="height: 200px; border: 2px dashed #dee2e6;">
                                                <div class="text-center text-muted">
                                                    <i class="bi bi-image display-4"></i>
                                                    <p class="mt-2 mb-0">Sin imagen</p>
                                                </div>
                                            </div>
                                        }

                                        <InputFile OnChange="SubirImagen" class="form-control" accept="image/*" />
                                        <small class="form-text text-muted">
                                            <i class="bi bi-info-circle"></i>
                                            JPG, PNG, GIF | Máximo: 5MB
                                        </small>

                                        @if (!string.IsNullOrEmpty(mensajeImagen))
                                        {
                                            <div class="alert @(mensajeImagen.Contains("Error") ? "alert-danger" : "alert-info") mt-2" role="alert">
                                                <small>@mensajeImagen</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@guardando">
                                @if (guardando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-floppy"></i> Guardar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<ImagenSitio> imagenes = new();
    private ImagenSitio imagenActual = new();
    private ImagenSitio? imagenAEliminar = null;
    private int dropdownAbierto = 0;
    private bool isLoading = true;
    private bool guardando = false;
    private bool eliminando = false;
    private bool mostrarModal = false;
    private bool mostrarModalEliminar = false;
    private string mensaje = string.Empty;
    private string mensajeImagen = string.Empty;
    private bool esError = false;
    private const long MaxFileSize = 5 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        await CargarImagenes();
        isLoading = false;
    }

    private async Task CargarImagenes()
    {
        try
        {
            imagenes = await context.ImagenesSitio
                .OrderBy(i => i.Clave)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar imágenes: {ex.Message}";
            esError = true;
        }
    }

    private void MostrarModalCrear()
    {
        imagenActual = new ImagenSitio
            {
                Activa = true,
                FechaCreacion = DateTime.UtcNow
            };
        mensajeImagen = string.Empty;
        mostrarModal = true;
    }

    private void EditarImagen(ImagenSitio imagen)
    {
        imagenActual = new ImagenSitio
            {
                Id = imagen.Id,
                Clave = imagen.Clave,
                Nombre = imagen.Nombre,
                Descripcion = imagen.Descripcion,
                ImagenData = imagen.ImagenData,
                TipoImagen = imagen.TipoImagen,
                NombreArchivo = imagen.NombreArchivo,
                Activa = imagen.Activa,
                FechaCreacion = imagen.FechaCreacion
            };
        mensajeImagen = string.Empty;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        imagenActual = new();
        mensajeImagen = string.Empty;
    }

    private void MostrarConfirmacionEliminar(ImagenSitio imagen)
    {
        imagenAEliminar = imagen;
        mostrarModalEliminar = true;
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        imagenAEliminar = null;
    }

    private void ToggleDropdown(int imagenId)
    {
        dropdownAbierto = dropdownAbierto == imagenId ? 0 : imagenId;
        StateHasChanged();
    }

    private async Task SubirImagen(InputFileChangeEventArgs e)
    {
        mensajeImagen = string.Empty;
        var archivo = e.File;

        if (archivo != null)
        {
            if (archivo.Size > MaxFileSize)
            {
                mensajeImagen = "Error: El archivo es demasiado grande. Máximo permitido: 5MB.";
                return;
            }

            var tiposPermitidos = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif" };
            if (!tiposPermitidos.Contains(archivo.ContentType.ToLower()))
            {
                mensajeImagen = "Error: Tipo de archivo no soportado. Use JPG, PNG o GIF.";
                return;
            }

            try
            {
                using var stream = archivo.OpenReadStream(MaxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);

                imagenActual.ImagenData = memoryStream.ToArray();
                imagenActual.TipoImagen = archivo.ContentType;
                imagenActual.NombreArchivo = archivo.Name;

                mensajeImagen = "Imagen cargada correctamente.";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                mensajeImagen = $"Error al cargar la imagen: {ex.Message}";
            }
        }
    }

    private void EliminarImagenActual()
    {
        imagenActual.ImagenData = null;
        imagenActual.TipoImagen = string.Empty;
        imagenActual.NombreArchivo = string.Empty;
        mensajeImagen = "Imagen eliminada del formulario.";
        StateHasChanged();
    }

    private async Task GuardarImagen()
    {
        try
        {
            guardando = true;
            mensaje = string.Empty;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(imagenActual.Clave) || string.IsNullOrWhiteSpace(imagenActual.Nombre))
            {
                mensaje = "Error: La clave y el nombre son requeridos.";
                esError = true;
                return;
            }

            if (imagenActual.Id == 0)
            {
                var existeImagen = await context.ImagenesSitio
                    .AnyAsync(i => i.Clave == imagenActual.Clave);

                if (existeImagen)
                {
                    mensaje = "Error: Ya existe una imagen con esa clave.";
                    esError = true;
                    return;
                }

                context.ImagenesSitio.Add(imagenActual);
            }
            else
            {
                var imagenExistente = await context.ImagenesSitio.FindAsync(imagenActual.Id);

                if (imagenExistente == null)
                {
                    mensaje = "Error: La imagen no fue encontrada.";
                    esError = true;
                    return;
                }

                imagenExistente.Nombre = imagenActual.Nombre;
                imagenExistente.Descripcion = imagenActual.Descripcion;
                imagenExistente.ImagenData = imagenActual.ImagenData;
                imagenExistente.TipoImagen = imagenActual.TipoImagen;
                imagenExistente.NombreArchivo = imagenActual.NombreArchivo;
                imagenExistente.Activa = imagenActual.Activa;
                imagenExistente.Ancho = imagenActual.Ancho;
                imagenExistente.Alto = imagenActual.Alto;
                imagenExistente.ObjectFit = imagenActual.ObjectFit;
                imagenExistente.OcultarFondo = imagenActual.OcultarFondo;
                imagenExistente.FechaModificacion = DateTime.UtcNow;
            }

            await context.SaveChangesAsync();

            mensaje = imagenActual.Id == 0 ? "Imagen creada exitosamente." : "Imagen actualizada exitosamente.";
            esError = false;

            await CargarImagenes();
            CerrarModal();
        }
        catch (Exception ex)
        {
            mensaje = $"Error al guardar la imagen: {ex.Message}";
            esError = true;
        }
        finally
        {
            guardando = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmarEliminar()
    {
        if (imagenAEliminar == null) return;

        try
        {
            eliminando = true;
            StateHasChanged();

            var imagen = await context.ImagenesSitio.FindAsync(imagenAEliminar.Id);

            if (imagen != null)
            {
                context.ImagenesSitio.Remove(imagen);
                await context.SaveChangesAsync();

                mensaje = $"Imagen '{imagen.Nombre}' eliminada exitosamente.";
                esError = false;
                await CargarImagenes();
            }
            else
            {
                mensaje = "La imagen no fue encontrada.";
                esError = true;
            }

            CerrarModalEliminar();
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar la imagen: {ex.Message}";
            esError = true;
        }
        finally
        {
            eliminando = false;
            StateHasChanged();
        }
    }
}