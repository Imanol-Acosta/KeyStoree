@page "/admin/imagenes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using KeyStore.DAL
@using KeyStore.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Gestión de Imágenes - KeyStore Admin</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-semibold text-primary">
                <i class="bi bi-images"></i> Gestión de Imágenes del Sitio
            </h3>
            <div>
                <a href="/" class="btn btn-outline-secondary me-2">
                    <i class="bi bi-house"></i> Ver Home
                </a>
                <a href="/Home/Crear" class="btn btn-outline-primary">
                    <i class="bi bi-plus-circle"></i> Crear Elemento
                </a>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert @(esError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                @mensaje
                <button type="button" class="btn-close" @onclick="() => mensaje = string.Empty"></button>
            </div>
        }

        <div class="row">
            @if (imagenes != null && imagenes.Any())
            {
                foreach (var imagen in imagenes.OrderBy(i => i.Clave))
                {
                    <div class="col-lg-6 col-xl-4 mb-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@imagen.Nombre</strong>
                                    <br>
                                    <small class="opacity-75">Clave: @imagen.Clave</small>
                                </div>
                                <span class="badge @(imagen.Activa ? "bg-success" : "bg-secondary")">
                                    @(imagen.Activa ? "Activa" : "Inactiva")
                                </span>
                            </div>
                            <div class="card-body p-3">
                                @if (imagen.ImagenData != null && imagen.ImagenData.Length > 0)
                                {
                                    <div class="text-center mb-3">
                                        <img src="data:@imagen.TipoImagen;base64,@Convert.ToBase64String(imagen.ImagenData)"
                                        alt="@imagen.Nombre"
                                        class="img-fluid rounded shadow-sm border"
                                        style="max-height: 200px; max-width: 100%; object-fit: cover;" />
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-center align-items-center bg-light rounded mb-3"
                                    style="height: 200px; border: 2px dashed #dee2e6;">
                                        <div class="text-center text-muted">
                                            <i class="bi bi-image display-4"></i>
                                            <p class="mt-2 mb-0">Sin imagen</p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(imagen.Descripcion))
                                {
                                    <p class="text-muted small mb-3">@imagen.Descripcion</p>
                                }

                                <div class="mb-3">
                                    <label class="form-label fw-bold">Cambiar Imagen</label>
                                    <InputFile OnChange="@(e => SubirImagen(e, imagen.Id))" accept="image/*" class="form-control form-control-sm" />
                                </div>

                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-outline-primary btn-sm"
                                    @onclick="() => ToggleActiva(imagen.Id)">
                                        <i class="bi @(imagen.Activa ? "bi-eye-slash" : "bi-eye")"></i>
                                        @(imagen.Activa ? "Desactivar" : "Activar")
                                    </button>
                                    @if (imagen.ImagenData != null && imagen.ImagenData.Length > 0)
                                    {
                                        <button type="button" class="btn btn-outline-danger btn-sm"
                                        @onclick="() => EliminarImagen(imagen.Id)">
                                            <i class="bi bi-trash"></i> Eliminar Imagen
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="card-footer text-muted text-center">
                                <small>
                                    <i class="bi bi-calendar"></i>
                                    Creado: @imagen.FechaCreacion.ToString("dd/MM/yyyy")
                                    @if (imagen.FechaModificacion.HasValue)
                                    {
                                    <br>
                                    <i class="bi bi-pencil"></i>
                                    Modificado: @imagen.FechaModificacion.Value.ToString("dd/MM/yyyy HH:mm");
                                    }
                                </small>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-info text-center">
                        <i class="bi bi-info-circle display-4"></i>
                        <h4 class="mt-3">No hay imágenes configuradas</h4>
                        <p>Las imágenes del sitio aparecerán aquí una vez que se creen las migraciones.</p>
                    </div>
                </div>
            }
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <div class="card bg-light">
                    <div class="card-header">
                        <strong><i class="bi bi-info-circle"></i> Información sobre las Imágenes</strong>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6><strong>Imágenes Principales:</strong></h6>
                                <ul class="list-unstyled">
                                    <li><strong>hero-keyboard:</strong> Imagen del teclado principal en el hero</li>
                                    <li><strong>about-image:</strong> Imagen del setup gaming en About Us</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6><strong>Productos Destacados:</strong></h6>
                                <ul class="list-unstyled">
                                    <li><strong>product-1, product-2, product-3:</strong> Imágenes de productos destacados</li>
                                </ul>
                            </div>
                        </div>
                        <div class="alert alert-warning mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Importante:</strong> Las imágenes se muestran automáticamente en el home cuando están activas.
                            Formatos soportados: JPG, PNG, GIF | Tamaño máximo: 5MB
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ImagenSitio> imagenes = new();
    private bool isLoading = true;
    private string mensaje = string.Empty;
    private bool esError = false;

    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB

    protected override async Task OnInitializedAsync()
    {
        await CargarImagenes();
    }

    private async Task CargarImagenes()
    {
        try
        {
            isLoading = true;
            await using var contexto = await DbContextFactory.CreateDbContextAsync();
            imagenes = await contexto.ImagenesSitio.ToListAsync();
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar las imágenes: {ex.Message}";
            esError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SubirImagen(InputFileChangeEventArgs e, int imagenId)
    {
        var archivo = e.File;

        if (archivo.Size > MaxFileSize)
        {
            mensaje = "Error: El archivo es demasiado grande. Máximo permitido: 5MB.";
            esError = true;
            StateHasChanged();
            return;
        }

        var tiposPermitidos = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif" };
        if (!tiposPermitidos.Contains(archivo.ContentType.ToLower()))
        {
            mensaje = "Error: Tipo de archivo no soportado. Use JPG, PNG o GIF.";
            esError = true;
            StateHasChanged();
            return;
        }

        try
        {
            await using var contexto = await DbContextFactory.CreateDbContextAsync();
            var imagen = await contexto.ImagenesSitio.FindAsync(imagenId);

            if (imagen != null)
            {
                using var stream = archivo.OpenReadStream(MaxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);

                imagen.ImagenData = memoryStream.ToArray();
                imagen.TipoImagen = archivo.ContentType;
                imagen.NombreArchivo = archivo.Name;
                imagen.FechaModificacion = DateTime.UtcNow;

                await contexto.SaveChangesAsync();
                mensaje = $"Imagen actualizada correctamente para {imagen.Nombre}.";
                esError = false;

                await CargarImagenes();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al subir la imagen: {ex.Message}";
            esError = true;
        }
        StateHasChanged();
    }

    private async Task ToggleActiva(int imagenId)
    {
        try
        {
            await using var contexto = await DbContextFactory.CreateDbContextAsync();
            var imagen = await contexto.ImagenesSitio.FindAsync(imagenId);

            if (imagen != null)
            {
                imagen.Activa = !imagen.Activa;
                imagen.FechaModificacion = DateTime.UtcNow;
                await contexto.SaveChangesAsync();

                mensaje = $"Estado cambiado: {imagen.Nombre} ahora está {(imagen.Activa ? "activa" : "inactiva")}.";
                esError = false;
                await CargarImagenes();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cambiar el estado: {ex.Message}";
            esError = true;
        }
        StateHasChanged();
    }

    private async Task EliminarImagen(int imagenId)
    {
        try
        {
            await using var contexto = await DbContextFactory.CreateDbContextAsync();
            var imagen = await contexto.ImagenesSitio.FindAsync(imagenId);

            if (imagen != null)
            {
                imagen.ImagenData = null;
                imagen.TipoImagen = null;
                imagen.NombreArchivo = null;
                imagen.FechaModificacion = DateTime.UtcNow;

                await contexto.SaveChangesAsync();
                mensaje = $"Imagen eliminada de {imagen.Nombre}.";
                esError = false;
                await CargarImagenes();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar la imagen: {ex.Message}";
            esError = true;
        }
        StateHasChanged();
    }
}
