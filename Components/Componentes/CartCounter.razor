@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.Text.Json
@implements IDisposable

<div class="cart-counter" @onclick="IrAlCarrito">
    <i class="bi bi-cart3"></i>
    @if (TotalItems > 0)
    {
        <span class="cart-count">@TotalItems</span>
        <div class="cart-preview" @onclick:stopPropagation="true">
            <div class="cart-preview-header">
                <h4>Carrito (@TotalItems @(TotalItems == 1 ? "artículo" : "artículos"))</h4>
            </div>
            <div class="cart-preview-items">
                @foreach (var item in ItemsCarrito.Take(3))
                {
                    <div class="cart-preview-item">
                        <div class="item-info">
                            <span class="item-name">@item.Producto.Nombre</span>
                            <div class="item-details">
                                <span class="item-quantity">@item.Cantidad x</span>
                                <span class="item-price">$@item.Producto.Precio.ToString("F2")</span>
                            </div>
                        </div>
                        <div class="item-total">
                            $@((item.Cantidad * item.Producto.Precio).ToString("F2"))
                        </div>
                    </div>
                }
                @if (ItemsCarrito.Count > 3)
                {
                    <div class="more-items">
                        y @(ItemsCarrito.Count - 3) artículo@(ItemsCarrito.Count - 3 == 1 ? "" : "s") más...
                    </div>
                }
            </div>
            <div class="cart-preview-footer">
                <div class="cart-total">
                    <strong>Total: $@TotalCarrito.ToString("F2")</strong>
                </div>
                <div class="cart-actions">
                    <button class="btn btn-outline-primary btn-sm" @onclick="IrAlCarrito">
                        Ver carrito
                    </button>
                    <button class="btn btn-primary btn-sm" @onclick="ProcederAlPago">
                        Pagar
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<ItemCarrito> ItemsCarrito = new();
    private int TotalItems => ItemsCarrito.Sum(i => i.Cantidad);
    private decimal TotalCarrito => ItemsCarrito.Sum(i => i.Cantidad * i.Producto.Precio);
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();


        _timer = new Timer(async _ => await CargarCarrito(), null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private async Task CargarCarrito()
    {
        try
        {
            var carritoJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "keystore_cart");

            if (!string.IsNullOrEmpty(carritoJson))
            {
                var productosIds = JsonSerializer.Deserialize<Dictionary<int, int>>(carritoJson) ?? new();

                if (productosIds.Any())
                {

                    var productosSimulados = new List<Producto>
                    {
                        new() { Id = 1, Nombre = "Teclado RGB Gaming Pro", Precio = 89.99m },
                        new() { Id = 2, Nombre = "Tema Cyberpunk 2077", Precio = 45.99m },
                        new() { Id = 3, Nombre = "Teclado Mecánico Wireless Elite", Precio = 125.99m },
                        new() { Id = 4, Nombre = "Keycaps Artisan Dragon", Precio = 35.99m }
                    };

                    var nuevosItems = productosIds
                        .Where(kvp => productosSimulados.Any(p => p.Id == kvp.Key))
                        .Select(kvp => new ItemCarrito
                            {
                                ProductoId = kvp.Key,
                                Cantidad = kvp.Value,
                                Producto = productosSimulados.First(p => p.Id == kvp.Key)
                            }).ToList();

                    if (!ItemsCarrito.SequenceEqual(nuevosItems, new ItemCarritoComparer()))
                    {
                        ItemsCarrito = nuevosItems;
                        await InvokeAsync(StateHasChanged);
                    }
                }
                else if (ItemsCarrito.Any())
                {
                    ItemsCarrito.Clear();
                    await InvokeAsync(StateHasChanged);
                }
            }
            else if (ItemsCarrito.Any())
            {
                ItemsCarrito.Clear();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando carrito: {ex.Message}");
        }
    }

    private void IrAlCarrito()
    {
        NavigationManager.NavigateTo("/cart");
    }

    private async Task ProcederAlPago()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Función de pago en desarrollo. ¡Pronto disponible!");
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public class ItemCarrito
    {
        public int ProductoId { get; set; }
        public int Cantidad { get; set; }
        public Producto Producto { get; set; } = new();
    }

    public class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public decimal Precio { get; set; }
    }

    public class ItemCarritoComparer : IEqualityComparer<ItemCarrito>
    {
        public bool Equals(ItemCarrito? x, ItemCarrito? y)
        {
            if (x == null && y == null) return true;
            if (x == null || y == null) return false;
            return x.ProductoId == y.ProductoId && x.Cantidad == y.Cantidad;
        }

        public int GetHashCode(ItemCarrito obj)
        {
            return HashCode.Combine(obj.ProductoId, obj.Cantidad);
        }
    }
}