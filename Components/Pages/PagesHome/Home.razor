@page "/"
@inject ApplicationDbContext context
@inject KeyStore.Services.ICartService CartService
@inject IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore
@using KeyStore.Data
@using KeyStore.Models
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<div class="home-container">
    <section class="hero-section">
        <div class="hero-content">
            <div class="hero-text">
                <h1 class="brand-title">KEYSTORE</h1>
                <div class="brand-subtitle">Experiencia Premium</div>
                <div class="hero-buttons">
                    <button class="btn btn-primary" @onclick="ScrollToFeatured">Comprar Ahora</button>
                    <a href="/Shop" class="btn btn-secondary">Explorar</a>
                </div>
            </div>
            <div class="hero-image">

                <div id="heroCarousel" class="carousel slide carousel-fade hero-carousel" data-bs-ride="carousel" data-bs-interval="5000">
                    @if (productosCarousel != null && productosCarousel.Any())
                    {
                        <div class="carousel-inner">
                            @for (int i = 0; i < productosCarousel.Count; i++)
                            {
                                var producto = productosCarousel[i];
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <div class="hero-carousel-card">
                                        @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                                        {
                                            <img src="@producto.ImagenUrl"
                                                 class="hero-carousel-image"
                                                 alt="@producto.Nombre">
                                        }
                                        else
                                        {
                                            <div class="hero-carousel-placeholder">
                                                <i class="bi bi-image"></i>
                                                <span>Sin imagen</span>
                                            </div>
                                        }

                                        <div class="hero-carousel-overlay">
                                            <div class="hero-carousel-info">
                                                <h3 class="hero-carousel-title">@producto.Nombre</h3>
                                                <p class="hero-carousel-price">$@producto.Precio.ToString("F2")</p>
                                                @if (!string.IsNullOrEmpty(producto.Marca))
                                                {
                                                    <p class="hero-carousel-brand">@producto.Marca</p>
                                                }
                                                <button class="btn btn-primary hero-carousel-btn"
                                                        @onclick="() => AgregarAlCarrito(producto.Id)"
                                                        disabled="@(procesandoCarrito || producto.Stock <= 0)">
                                                    <i class="bi bi-cart-plus"></i>
                                                    @(producto.Stock <= 0 ? "Sin stock" : "Agregar al Carrito")
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>


                        <div class="carousel-indicators hero-carousel-indicators">
                            @for (int i = 0; i < productosCarousel.Count; i++)
                            {
                                <button type="button"
                                        data-bs-target="#heroCarousel"
                                        data-bs-slide-to="@i"
                                        class="@(i == 0 ? "active" : "")"
                                        aria-current="@(i == 0 ? "true" : "false")"
                                        aria-label="Slide @(i + 1)">
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <div class="hero-empty-carousel">
                                    <div class="empty-carousel-content">
                                        <i class="bi bi-box-seam display-1 text-muted mb-3"></i>
                                        <h4 class="text-white">No hay productos para mostrar</h4>
                                        <p class="text-muted">Agrega algunos productos para que aparezcan en el carousel</p>
                                        <AuthorizeView Roles="Admin">
                                            <Authorized>
                                                <a href="/Productos/Crear" class="btn btn-primary">
                                                    <i class="bi bi-plus-circle"></i> Crear Producto
                                                </a>
                                            </Authorized>
                                        </AuthorizeView>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="hero-glow"></div>
            </div>
        </div>
    </section>

    <section class="categories-section">
        <h2 class="section-title">Productos</h2>
        <div class="categories-grid">
            @if (productos != null && productos.Any())
            {
                foreach (var producto in productos.Take(10))
                {
                    <div class="category-card">
                        @if (producto.EsDestacado)
                        {
                            <div class="product-badge featured static">
                                <i class="bi bi-star-fill"></i>
                            </div>
                        }
                        @if (producto.Stock <= 0)
                        {
                            <div class="product-badge out-of-stock">
                                Sin Stock
                            </div>
                        }
                        else if (producto.Stock <= 5)
                        {
                            <div class="product-badge low-stock">
                                Pocas Unidades
                            </div>
                        }

                        <div class="category-image">
                            @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                            {
                                <img src="@producto.ImagenUrl" alt="@producto.Nombre" class="img-fluid" />
                            }
                            else
                            {
                                <span class="image-ref">[Sin imagen]</span>
                            }
                            <div class="category-overlay">
                                <button class="btn-quick-view"
                                        @onclick="() => MostrarDetalleRapido(producto)"
                                        title="Vista rápida">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn-add-cart @(procesandoCarrito || producto.Stock <= 0 ? "disabled" : "")"
                                        @onclick="() => AgregarAlCarrito(producto.Id)"
                                        disabled="@(procesandoCarrito || producto.Stock <= 0)"
                                        title="@(producto.Stock <= 0 ? "Sin stock" : "Agregar al carrito")">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="category-info">
                            <p class="category-title">@producto.Nombre</p>
                            <div class="category-price">$@producto.Precio.ToString("F2")</div>
                            @if (!string.IsNullOrEmpty(producto.Marca))
                            {
                                <small class="category-brand">@producto.Marca</small>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="bi bi-box-seam"></i>
                    <h4>No hay productos aún</h4>
                    <p>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <a href="/Productos/Crear" class="btn btn-primary">
                                    <i class="bi bi-plus-circle"></i> Crear tu primer producto
                                </a>
                            </Authorized>
                            <NotAuthorized>
                                <span>Próximamente tendremos productos disponibles</span>
                            </NotAuthorized>
                        </AuthorizeView>
                    </p>
                </div>
            }
        </div>

        @if (productos != null && productos.Count >= 10)
        {
            <div class="text-center mt-4">
                <a href="/Shop" class="btn btn-primary">Ver todos</a>
            </div>
        }
    </section>

    <section class="featured-section" id="featured-section">
        <h2 class="section-title">Productos Destacados</h2>
        <p class="featured-subtitle">Eleva tu experiencia con nuestros productos más populares</p>
        <div class="products-grid">
            @if (productosDestacados != null && productosDestacados.Any())
            {
                foreach (var producto in productosDestacados.Take(3))
                {
                    <div class="product-card">
                        @if (producto.EsDestacado)
                        {
                            <div class="product-badge featured static">
                                <i class="bi bi-star-fill"></i>
                            </div>
                        }
                        @if (producto.Stock <= 0)
                        {
                            <div class="product-badge out-of-stock">
                                Sin Stock
                            </div>
                        }
                        else if (producto.Stock <= 5)
                        {
                            <div class="product-badge low-stock">
                                Pocas Unidades
                            </div>
                        }

                        <div class="product-image">
                            @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                            {
                                <img src="@producto.ImagenUrl"
                                     alt="@producto.Nombre"
                                     class="img-fluid"
                                     style="object-fit: cover;" />
                            }
                            else
                            {
                                <span class="image-ref">[IMAGEN: @producto.Nombre]</span>
                            }
                            <div class="product-overlay">
                                <button class="btn-quick-view"
                                        @onclick="() => MostrarDetalleRapido(producto)"
                                        title="Vista rápida">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn-add-cart @(procesandoCarrito || producto.Stock <= 0 ? "disabled" : "")"
                                        @onclick="() => AgregarAlCarrito(producto.Id)"
                                        disabled="@(procesandoCarrito || producto.Stock <= 0)"
                                        title="@(producto.Stock <= 0 ? "Sin stock" : "Agregar al carrito")">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="product-info">
                            <h5>@producto.Nombre</h5>
                            <p class="price">$@producto.Precio.ToString("F2")</p>
                        </div>
                    </div>
                }
            }
            else
            {

                <div class="product-card">
                    <div class="product-image">
                        @{
                            var product1Image = ObtenerImagenSitio("product-1");
                            var product1Config = ObtenerConfiguracionImagen("product-1");
                        }
                        @if (!string.IsNullOrEmpty(product1Image))
                        {
                            <img src="@product1Image"
                                 alt="Producto destacado 1"
                                 class="img-fluid"
                                 style="@(product1Config?.GenerarEstilosCSS() ?? "object-fit: cover;")" />
                        }
                        else if (product1Config?.OcultarFondo != true)
                        {
                            <span class="image-ref">[IMAGEN: Producto 1 - product-1.jpg]</span>
                        }
                        <div class="product-overlay">
                            <button class="btn-quick-view"
                                    @onclick='() => MostrarDetalleProductoEstatico(1, "Teclado RGB Gaming Pro")'
                                    title="Vista rápida">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn-add-cart @(procesandoCarrito ? "disabled" : "")"
                                    @onclick="() => AgregarProductoDestacado(1)"
                                    disabled="@procesandoCarrito"
                                    title="Agregar al carrito">
                                <i class="bi bi-cart-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="product-info">
                        <h5>Teclado RGB Gaming Pro</h5>
                        <p class="price">$89.99</p>
                    </div>
                </div>
                <div class="product-card">
                    <div class="product-image">
                        @{
                            var product2Image = ObtenerImagenSitio("product-2");
                            var product2Config = ObtenerConfiguracionImagen("product-2");
                        }
                        @if (!string.IsNullOrEmpty(product2Image))
                        {
                            <img src="@product2Image"
                                 alt="Producto destacado 2"
                                 class="img-fluid"
                                 style="@(product2Config?.GenerarEstilosCSS() ?? "object-fit: cover;")" />
                        }
                        else if (product2Config?.OcultarFondo != true)
                        {
                            <span class="image-ref">[IMAGEN: Producto 2 - product-2.jpg]</span>
                        }
                        <div class="product-overlay">
                            <button class="btn-quick-view"
                                    @onclick='() => MostrarDetalleProductoEstatico(2, "Tema Cyberpunk 2077")'
                                    title="Vista rápida">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn-add-cart @(procesandoCarrito ? "disabled" : "")"
                                    @onclick="() => AgregarProductoDestacado(2)"
                                    disabled="@procesandoCarrito"
                                    title="Agregar al carrito">
                                <i class="bi bi-cart-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="product-info">
                        <h5>Tema Cyberpunk 2077</h5>
                        <p class="price">$29.99</p>
                    </div>
                </div>
                <div class="product-card">
                    <div class="product-image">
                        @{
                            var product3Image = ObtenerImagenSitio("product-3");
                            var product3Config = ObtenerConfiguracionImagen("product-3");
                        }
                        @if (!string.IsNullOrEmpty(product3Image))
                        {
                            <img src="@product3Image"
                                 alt="Producto destacado 3"
                                 class="img-fluid"
                                 style="@(product3Config?.GenerarEstilosCSS() ?? "object-fit: cover;")" />
                        }
                        else if (product3Config?.OcultarFondo != true)
                        {
                            <span class="image-ref">[IMAGEN: Producto 3 - product-3.jpg]</span>
                        }
                        <div class="product-overlay">
                            <button class="btn-quick-view"
                                    @onclick='() => MostrarDetalleProductoEstatico(3, "Teclado Mecánico Elite")'
                                    title="Vista rápida">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn-add-cart @(procesandoCarrito ? "disabled" : "")"
                                    @onclick="() => AgregarProductoDestacado(3)"
                                    disabled="@procesandoCarrito"
                                    title="Agregar al carrito">
                                <i class="bi bi-cart-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="product-info">
                        <h5>Teclado Mecánico Elite</h5>
                        <p class="price">$129.99</p>
                    </div>
                </div>
            }
        </div>
    </section>

    <section class="about-section">
        <div class="about-content">
            <div class="about-text">
                <h3 class="about-title">Sobre Nosotros</h3>
                <p class="about-description">
                    Transformando la experiencia de adquirir perifericos, creando conexiones perfectas entre tecnología y creatividad.
                </p>
                <a href="/about" class="learn-more">Saber mas</a>
            </div>
            <div class="about-image">
                @{
                    var aboutImage = ObtenerImagenSitio("about-image");
                    var aboutConfig = ObtenerConfiguracionImagen("about-image");
                }
                @if (!string.IsNullOrEmpty(aboutImage))
                {
                    <img src="@aboutImage"
                         alt="Setup gaming"
                         class="img-fluid"
                         style="@(aboutConfig?.GenerarEstilosCSS() ?? "object-fit: cover;")" />
                }
                else if (aboutConfig?.OcultarFondo != true)
                {
                    <span class="image-ref">[IMAGEN: Setup gaming - about-image.jpg]</span>
                }
            </div>
        </div>
    </section>

    <footer class="footer">
        <div class="footer-links">
            <a href="/Shop" class="footer-link">Comprar</a>
            <a href="/About" class="footer-link">Sobre nosotros</a>
            <a href="/contacto" class="footer-link">Contacto</a>
        </div>
    </footer>
</div>

@if (productoSeleccionado != null && mostrarModalDetalle)
{
    <div class="modal-overlay-shop" @onclick="CerrarModalDetalle">
        <div class="modal-container-detail" @onclick:stopPropagation="true">
            <div class="modal-header-detail">
                <h2 class="modal-title-detail">@productoSeleccionado.Nombre</h2>
                <button class="btn-close-modal" @onclick="CerrarModalDetalle">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="modal-content-detail">
                <div class="detail-layout">
                    <div class="detail-image-section">
                        @if (!string.IsNullOrEmpty(productoSeleccionado.ImagenUrl))
                        {
                            <img src="@productoSeleccionado.ImagenUrl"
                                 alt="@productoSeleccionado.Nombre"
                                 class="detail-image" />
                        }
                        else
                        {
                            <div class="detail-placeholder">
                                <i class="bi bi-image"></i>
                                <span>Sin imagen disponible</span>
                            </div>
                        }
                    </div>

                    <div class="detail-info-section">
                        <div class="detail-category">@ObtenerNombreCategoriaModal(productoSeleccionado.CategoriaId)</div>

                        @if (!string.IsNullOrEmpty(productoSeleccionado.Descripcion))
                        {
                            <p class="detail-description">@productoSeleccionado.Descripcion</p>
                        }

                        <div class="detail-specs">
                            @if (!string.IsNullOrEmpty(productoSeleccionado.Marca))
                            {
                                <div class="spec-item">
                                    <strong>Marca:</strong> @productoSeleccionado.Marca
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(productoSeleccionado.Modelo))
                            {
                                <div class="spec-item">
                                    <strong>Modelo:</strong> @productoSeleccionado.Modelo
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(productoSeleccionado.Layout))
                            {
                                <div class="spec-item">
                                    <strong>Layout:</strong> @productoSeleccionado.Layout
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(productoSeleccionado.ColorPrincipal))
                            {
                                <div class="spec-item">
                                    <strong>Color:</strong> @productoSeleccionado.ColorPrincipal
                                </div>
                            }
                            @{
                                var nombreCategoria = ObtenerNombreCategoriaModal(productoSeleccionado.CategoriaId).ToLower();
                                var esTeclado = nombreCategoria.Contains("teclado");
                            }
                            @if (esTeclado)
                            {
                                <div class="spec-item">
                                    <strong>Conexión:</strong> @productoSeleccionado.TipoConexion.ToString().Replace("_", " ")
                                </div>
                                <div class="spec-item">
                                    <strong>Switch:</strong> @productoSeleccionado.TipoSwitch.ToString().Replace("_", " ")
                                </div>
                            }
                        </div>

                        <div class="detail-features">
                            @if (productoSeleccionado.EsIluminado)
                            {
                                <span class="detail-feature rgb">
                                    <i class="bi bi-lightbulb-fill"></i>
                                    Iluminación RGB
                                </span>
                            }
                            @if (productoSeleccionado.EsInalámbrico)
                            {
                                <span class="detail-feature wireless">
                                    <i class="bi bi-wifi"></i>
                                    Conexión Inalámbrica
                                </span>
                            }
                            @if (productoSeleccionado.EsMecánico)
                            {
                                <span class="detail-feature mechanical">
                                    <i class="bi bi-gear-fill"></i>
                                    Switches Mecánicos
                                </span>
                            
                            }
                        </div>

                        <div class="detail-actions">
                            <div class="detail-pricing">
                                <span class="detail-price">$@productoSeleccionado.Precio.ToString("F2")</span>
                                <div class="detail-stock">
                                    @if (productoSeleccionado.Stock > 0)
                                    {
                                        <span class="stock-available">
                                            <i class="bi bi-check-circle-fill"></i>
                                            @productoSeleccionado.Stock disponibles
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="stock-unavailable">
                                            <i class="bi bi-x-circle-fill"></i>
                                            Sin stock
                                        </span>
                                    }
                                </div>
                            </div>

                            <div class="detail-buttons">
                                <button class="btn-add-cart-detail @(productoSeleccionado.Stock <= 0 ? "disabled" : "")"
                                        @onclick="() => AgregarAlCarrito(productoSeleccionado.Id)"
                                        disabled="@(procesandoCarrito || productoSeleccionado.Stock <= 0)">
                                    <i class="bi bi-cart-plus"></i>
                                    @(productoSeleccionado.Stock <= 0 ? "Sin stock" : "Agregar al carrito")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarToast)
{
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <i class="bi bi-check-circle-fill text-success me-2"></i>
                <strong class="me-auto">Carrito</strong>
                <button type="button" class="btn-close" @onclick="() => mostrarToast = false"></button>
            </div>
            <div class="toast-body">
                @mensajeToast
            </div>
        </div>
    </div>
}

<script>

    window.scrollToElement = function(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollIntoView({
                behavior: 'smooth',
                block: 'start',
                inline: 'nearest'
            });
            return true;
        }
        console.warn(`Elemento con ID '${elementId}' no encontrado`);
        return false;
    };
</script>

@code {
    private List<Producto> productos = new();
    private List<Producto> productosDestacados = new();
    private List<Producto> productosCarousel = new();
    private List<Categoria> categorias = new();
    private Dictionary<string, ImagenSitio> imagenesSitio = new();
    private bool procesandoCarrito = false;
    private bool mostrarToast = false;
    private string mensajeToast = "";

    private bool mostrarModalDetalle = false;
    private Producto? productoSeleccionado = null;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Iniciando OnInitializedAsync...");

        await CargarProductos();
        await CargarProductosDestacados();
        await CargarProductosCarousel();
        await CargarImagenesSitio();
        await CargarCategorias();

        Console.WriteLine("Finalizando OnInitializedAsync...");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Primer render completado");

            await Task.Delay(300);

            try
            {
                var result = await JSRuntime.InvokeAsync<bool>("initializeHeroCarousel");

                if (result)
                {
                    Console.WriteLine("Carousel inicializado exitosamente");
                    await JSRuntime.InvokeVoidAsync("observeCarouselChanges");
                }
                else
                {
                    Console.WriteLine("Fallo en la inicialización del carousel");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error inicializando carousel: {ex.Message}");

                await Task.Delay(1000);
                try
                {
                    await JSRuntime.InvokeVoidAsync("reinitializeComponents");
                    Console.WriteLine("Componentes reinicializados en segundo intento");
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Error en reinicialización: {ex2.Message}");
                }
            }
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            Console.WriteLine("Iniciando carga de productos...");

            var todosLosProductos = await context.Productos.ToListAsync();
            Console.WriteLine($"Total de productos en BD: {todosLosProductos.Count}");

            productos = await context.Productos
                .Where(p => p.Stock > 0)
                .OrderBy(p => p.Nombre)
                .ToListAsync();

            Console.WriteLine($"Productos con stock > 0: {productos.Count}");

            foreach (var p in productos.Take(3))
            {
                Console.WriteLine($"Producto: {p.Nombre}, Stock: {p.Stock}, Precio: {p.Precio}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando productos: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            productos = new List<Producto>();
        }
    }

    private async Task CargarProductosDestacados()
    {
        try
        {
            Console.WriteLine("Cargando productos destacados por categoría...");

            var categoriasActivas = await context.Categorias
                .Where(c => c.EsActiva)
                .ToListAsync();

            var categoriaTeclado = categoriasActivas.FirstOrDefault(c => c.Nombre.ToLower().Contains("teclado"));
            var categoriaMouse = categoriasActivas.FirstOrDefault(c => c.Nombre.ToLower().Contains("mouse") || c.Nombre.ToLower().Contains("ratón"));
            var categoriaAudifonos = categoriasActivas.FirstOrDefault(c => c.Nombre.ToLower().Contains("audífono") || c.Nombre.ToLower().Contains("headset") || c.Nombre.ToLower().Contains("auricular"));

            productosDestacados = new List<Producto>();

            if (categoriaTeclado != null)
            {
                var productoTeclado = await context.Productos
                    .Where(p => p.EsDestacado && p.Stock > 0 && p.CategoriaId == categoriaTeclado.Id)
                    .OrderBy(p => p.Nombre)
                    .FirstOrDefaultAsync();

                if (productoTeclado != null)
                {
                    productosDestacados.Add(productoTeclado);
                    Console.WriteLine($"Producto destacado teclado: {productoTeclado.Nombre}");
                }
            }

            if (categoriaMouse != null)
            {
                var productoMouse = await context.Productos
                    .Where(p => p.EsDestacado && p.Stock > 0 && p.CategoriaId == categoriaMouse.Id)
                    .OrderBy(p => p.Nombre)
                    .FirstOrDefaultAsync();

                if (productoMouse != null)
                {
                    productosDestacados.Add(productoMouse);
                    Console.WriteLine($"Producto destacado mouse: {productoMouse.Nombre}");
                }
            }

            if (categoriaAudifonos != null)
            {
                var productoAudifonos = await context.Productos
                    .Where(p => p.EsDestacado && p.Stock > 0 && p.CategoriaId == categoriaAudifonos.Id)
                    .OrderBy(p => p.Nombre)
                    .FirstOrDefaultAsync();

                if (productoAudifonos != null)
                {
                    productosDestacados.Add(productoAudifonos);
                    Console.WriteLine($"Producto destacado audífonos: {productoAudifonos.Nombre}");
                }
            }


            var faltantes = 3 - productosDestacados.Count;
            if (faltantes > 0)
            {
                var idsExistentes = productosDestacados.Select(p => p.Id).ToList();
                var productosAdicionales = await context.Productos
                    .Where(p => p.EsDestacado && p.Stock > 0 && !idsExistentes.Contains(p.Id))
                    .OrderBy(p => p.Nombre)
                    .Take(faltantes)
                    .ToListAsync();

                productosDestacados.AddRange(productosAdicionales);
            }

            Console.WriteLine($"Productos destacados cargados: {productosDestacados.Count}");
            foreach (var producto in productosDestacados)
            {
                var categoria = categoriasActivas.FirstOrDefault(c => c.Id == producto.CategoriaId);
                Console.WriteLine($"  - {producto.Nombre} (Categoría: {categoria?.Nombre ?? "N/A"})");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando productos destacados: {ex.Message}");
            productosDestacados = new List<Producto>();
        }
    }

    private async Task CargarProductosCarousel()
    {
        try
        {
            Console.WriteLine("Cargando productos del carousel...");
            productosCarousel = await context.Productos
                .Where(p => p.Stock > 0 && !string.IsNullOrEmpty(p.ImagenUrl))
                .OrderByDescending(p => p.EsDestacado)
                .ThenBy(p => p.Id)
                .Take(5)
                .ToListAsync();

            Console.WriteLine($"Productos del carousel cargados: {productosCarousel.Count}");

            StateHasChanged();

            _ = Task.Run(async () =>
            {
                await Task.Delay(300);
                await InvokeAsync(async () =>
                {
                    try
                    {
                        await JSRuntime.InvokeVoidAsync("reinitializeComponents");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error reinicializando carousel: {ex.Message}");
                    }
                });
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando productos del carousel: {ex.Message}");
            productosCarousel = new List<Producto>();
        }
    }

    private async Task CargarImagenesSitio()
    {
        try
        {
            var imagenes = await context.ImagenesSitio
                .Where(i => i.Activa && i.ImagenData != null)
                .ToListAsync();

            imagenesSitio = imagenes.ToDictionary(i => i.Clave, i => i);
            Console.WriteLine($"Imágenes del sitio cargadas: {imagenesSitio.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando imágenes del sitio: {ex.Message}");
            imagenesSitio = new Dictionary<string, ImagenSitio>();
        }
    }

    private async Task CargarCategorias()
    {
        try
        {
            categorias = await context.Categorias
                .Where(c => c.EsActiva)
                .OrderBy(c => c.Orden)
                .ThenBy(c => c.Nombre)
                .ToListAsync();

            Console.WriteLine($"Categorías cargadas: {categorias.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando categorías: {ex.Message}");
            categorias = new List<Categoria>();
        }
    }

    private string ObtenerImagenSitio(string clave)
    {
        if (imagenesSitio.TryGetValue(clave, out var imagen) &&
            imagen.ImagenData != null && imagen.ImagenData.Length > 0)
        {
            var base64 = Convert.ToBase64String(imagen.ImagenData);
            return $"data:{imagen.TipoImagen};base64,{base64}";
        }
        return string.Empty;
    }

    private ImagenSitio? ObtenerConfiguracionImagen(string clave)
    {
        if (imagenesSitio.TryGetValue(clave, out var imagen))
        {
            return imagen;
        }
        return null;
    }

    private string ObtenerNombreCategoriaModal(int categoriaId)
    {
        return categorias.FirstOrDefault(c => c.Id == categoriaId)?.Nombre ?? "Sin categoría";
    }

    private async Task ScrollToFeatured()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", "featured-section");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en scroll: {ex.Message}");
        }
    }

    private void MostrarDetalleRapido(Producto producto)
    {
        productoSeleccionado = producto;
        mostrarModalDetalle = true;
    }

    private void MostrarDetalleProductoEstatico(int productoId, string nombreProducto)
    {

        productoSeleccionado = new Producto
            {
                Id = productoId,
                Nombre = nombreProducto,
                Precio = productoId switch
                {
                    1 => 89.99m,
                    2 => 29.99m,
                    3 => 129.99m,
                    _ => 0m
                },
                Descripcion = productoId switch
                {
                    1 => "Teclado gaming mecánico con iluminación RGB personalizable y switches de alta calidad.",
                    2 => "Tema visual personalizado inspirado en Cyberpunk 2077 para tu setup gaming.",
                    3 => "Teclado mecánico premium con switches Cherry MX y construcción de aluminio.",
                    _ => "Producto destacado de alta calidad."
                },
                Stock = 10,
                CategoriaId = 1,
                Marca = productoId switch
                {
                    1 => "KeyStore Gaming",
                    2 => "KeyStore Themes",
                    3 => "KeyStore Elite",
                    _ => "KeyStore"
                },
                EsIluminado = productoId == 1 || productoId == 3,
                EsMecánico = productoId == 1 || productoId == 3,
                EsInalámbrico = productoId == 3,
                ImagenUrl = ObtenerImagenSitio($"product-{productoId}")
            };
        mostrarModalDetalle = true;
    }

    private void CerrarModalDetalle()
    {
        mostrarModalDetalle = false;
        productoSeleccionado = null;
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        if (procesandoCarrito) return;

        try
        {
            procesandoCarrito = true;

            var producto = await context.Productos
                .FirstOrDefaultAsync(p => p.Id == productoId);

            if (producto != null && producto.Stock > 0)
            {
                await CartService.AddToCartAsync(producto.Id, 1);

                mensajeToast = $"'{producto.Nombre}' agregado al carrito";
                mostrarToast = true;

                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() =>
                {
                    mostrarToast = false;
                    StateHasChanged();
                }));

                if (mostrarModalDetalle)
                {
                    CerrarModalDetalle();
                }
            }
            else
            {
                mensajeToast = producto == null ? "Producto no encontrado" : "Producto sin stock disponible";
                mostrarToast = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error agregando al carrito: {ex.Message}");
            mensajeToast = $"Error: {ex.Message}";
            mostrarToast = true;
        }
        finally
        {
            procesandoCarrito = false;
            StateHasChanged();
        }
    }

    private async Task AgregarProductoDestacado(int productoId)
    {
        if (procesandoCarrito) return;

        try
        {
            procesandoCarrito = true;

            var productosDestacadosPorDefecto = new Dictionary<int, string>
            {
                { 1, "Teclado RGB Gaming Pro" },
                { 2, "Tema Cyberpunk 2077" },
                { 3, "Teclado Mecánico Elite" }
            };

            await CartService.AddToCartAsync(productoId, 1);

            var nombreProducto = productosDestacadosPorDefecto.ContainsKey(productoId)
                ? productosDestacadosPorDefecto[productoId]
                : "Producto destacado";

            mensajeToast = $"'{nombreProducto}' agregado al carrito";
            mostrarToast = true;

            _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() =>
            {
                mostrarToast = false;
                StateHasChanged();
            }));

            if (mostrarModalDetalle)
            {
                CerrarModalDetalle();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error agregando producto destacado al carrito: {ex.Message}");
            mensajeToast = $"Error: {ex.Message}";
            mostrarToast = true;
        }
        finally
        {
            procesandoCarrito = false;
            StateHasChanged();
        }
    }
}