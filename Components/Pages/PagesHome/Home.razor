@page "/"
@inject IDbContextFactory<Contexto> DbContextFactory
@using Microsoft.EntityFrameworkCore
@using KeyStore.DAL
@using KeyStore.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="home-container">
    <!-- Panel de administración flotante y elegante -->
    <div class="admin-floating-panel">
        <div class="admin-toggle-btn" onclick="toggleAdminPanel()">
            <i class="bi bi-gear-fill"></i>
        </div>
        <div class="admin-dropdown" id="adminDropdown">
            <div class="admin-dropdown-header">
                <i class="bi bi-shield-lock-fill"></i>
                <span>Panel Admin</span>
            </div>
            <a href="/Home/Crear" class="admin-dropdown-item">
                <i class="bi bi-plus-circle-fill"></i>
                <span>Crear Elemento</span>
            </a>
            <a href="/admin/imagenes" class="admin-dropdown-item">
                <i class="bi bi-images"></i>
                <span>Gestionar Imágenes</span>
            </a>
            <a href="/admin/manage" class="admin-dropdown-item">
                <i class="bi bi-list-ul"></i>
                <span>Gestionar</span>
            </a>
        </div>
    </div>

    <section class="hero-section">
        <div class="hero-content">
            <div class="hero-text">
                <h1 class="brand-title">KEYSTORE</h1>
                <div class="brand-subtitle">Premium Keyboard Experience</div>
                <div class="hero-buttons">
                    <button class="btn btn-primary">Comprar Ahora</button>
                    <button class="btn btn-secondary">Explorar</button>
                </div>
            </div>
            <div class="hero-image">
                <div class="keyboard-main">
                    @{
                        var heroImage = ObtenerImagenSitio("hero-keyboard");
                    }
                    @if (!string.IsNullOrEmpty(heroImage))
                    {
                        <img src="@heroImage" alt="Teclado mecánico principal" class="img-fluid" />
                    }
                    else
                    {
                        <span class="image-ref">[IMAGEN: Teclado mecánico principal - hero-keyboard.jpg]</span>
                    }
                    <div class="hero-glow"></div>
                </div>
            </div>
        </div>
    </section>

    <section class="categories-section">
        <h2 class="section-title">Productos</h2>
        <div class="categories-grid">
            @if (productos != null && productos.Any())
            {
                foreach (var item in productos.OrderBy(p => p.Orden))
                {
                    <div class="category-card">
                        <div class="category-image">
                            @if (item.ImagenData != null && item.ImagenData.Length > 0)
                            {
                                var base64 = Convert.ToBase64String(item.ImagenData);
                                <img src="data:image/jpeg;base64,@base64" alt="@item.NombreImagen" class="img-fluid" />
                            }
                            else
                            {
                                <span class="image-ref">[Sin imagen]</span>
                            }
                            <div class="category-overlay">
                                <button class="add-btn-new">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="category-info">
                            <p class="category-title">@item.Titulo</p>
                            <div class="category-price">Desde $@item.Precio.ToString("F2")</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="bi bi-box-seam"></i>
                    <h4>No hay productos aún</h4>
                    <p>Agrega productos para mostrar aquí</p>
                </div>
            }
        </div>
    </section>

    <section class="featured-section">
        <p class="featured-subtitle">Eleva tu experiencia de escritura con nuestros temas de teclado personalizados</p>
        <div class="products-grid">
            <div class="product-card">
                <div class="product-image">
                    @{
                        var product1Image = ObtenerImagenSitio("product-1");
                    }
                    @if (!string.IsNullOrEmpty(product1Image))
                    {
                        <img src="@product1Image" alt="Producto destacado 1" class="img-fluid" />
                    }
                    else
                    {
                        <span class="image-ref">[IMAGEN: Producto 1 - product-1.jpg]</span>
                    }
                    <div class="product-overlay">
                        <button class="add-btn-featured">
                            <i class="bi bi-cart-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="product-card">
                <div class="product-image">
                    @{
                        var product2Image = ObtenerImagenSitio("product-2");
                    }
                    @if (!string.IsNullOrEmpty(product2Image))
                    {
                        <img src="@product2Image" alt="Producto destacado 2" class="img-fluid" />
                    }
                    else
                    {
                        <span class="image-ref">[IMAGEN: Producto 2 - product-2.jpg]</span>
                    }
                    <div class="product-overlay">
                        <button class="add-btn-featured">
                            <i class="bi bi-cart-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="product-card">
                <div class="product-image">
                    @{
                        var product3Image = ObtenerImagenSitio("product-3");
                    }
                    @if (!string.IsNullOrEmpty(product3Image))
                    {
                        <img src="@product3Image" alt="Producto destacado 3" class="img-fluid" />
                    }
                    else
                    {
                        <span class="image-ref">[IMAGEN: Producto 3 - product-3.jpg]</span>
                    }
                    <div class="product-overlay">
                        <button class="add-btn-featured">
                            <i class="bi bi-cart-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="about-section">
        <div class="about-content">
            <div class="about-text">
                <h3 class="about-title">About Us</h3>
                <p class="about-description">
                    Our mission is to bring personalized keyboard experiences to everyone. Learn more about our
                    journey and our dedication to quality and innovation.
                </p>
                <a href="#" class="learn-more">Learn more</a>
            </div>
            <div class="about-image">
                @{
                    var aboutImage = ObtenerImagenSitio("about-image");
                }
                @if (!string.IsNullOrEmpty(aboutImage))
                {
                    <img src="@aboutImage" alt="Setup gaming" class="img-fluid" />
                }
                else
                {
                    <span class="image-ref">[IMAGEN: Setup gaming - about-image.jpg]</span>
                }
            </div>
        </div>
    </section>

    <footer class="footer">
        <div class="footer-links">
            <a href="#" class="footer-link">About Us</a>
            <a href="#" class="footer-link">Contact Us</a>
            <a href="#" class="footer-link">Services</a>
            <a href="#" class="footer-link">Privacy Policy</a>
            <a href="#" class="footer-link">Terms and Conditions</a>
        </div>
    </footer>
</div>

<script>
    function toggleAdminPanel() {
        const dropdown = document.getElementById('adminDropdown');
        dropdown.classList.toggle('show');
    }

    // Cerrar el panel al hacer clic fuera
    document.addEventListener('click', function(event) {
        const panel = document.querySelector('.admin-floating-panel');
        if (!panel.contains(event.target)) {
            document.getElementById('adminDropdown').classList.remove('show');
        }
    });
</script>

@code {
    private List<ElementoHome> productos;
    private Dictionary<string, ImagenSitio> imagenesSitio = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        await CargarImagenesSitio();
    }

    private async Task CargarProductos()
    {
        await using var contexto = await DbContextFactory.CreateDbContextAsync();
        productos = await contexto.ElementosHome
            .Where(e => e.TipoElemento == "Categoria")
            .OrderBy(e => e.Orden)
            .ToListAsync();
    }

    private async Task CargarImagenesSitio()
    {
        try
        {
            await using var contexto = await DbContextFactory.CreateDbContextAsync();
            var imagenes = await contexto.ImagenesSitio
                .Where(i => i.Activa && i.ImagenData != null)
                .ToListAsync();

            imagenesSitio = imagenes.ToDictionary(i => i.Clave, i => i);
        }
        catch (Exception)
        {
            // Si hay error (ej: tabla no existe aún), usar diccionario vacío
            imagenesSitio = new Dictionary<string, ImagenSitio>();
        }
    }

    private string ObtenerImagenSitio(string clave)
    {
        if (imagenesSitio.TryGetValue(clave, out var imagen) &&
            imagen.ImagenData != null && imagen.ImagenData.Length > 0)
        {
            var base64 = Convert.ToBase64String(imagen.ImagenData);
            return $"data:{imagen.TipoImagen};base64,{base64}";
        }
        return string.Empty;
    }
}