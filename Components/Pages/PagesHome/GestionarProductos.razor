@page "/admin/manage"
@using Microsoft.EntityFrameworkCore
@using KeyStore.Data
@using KeyStore.Models
@using KeyStore.Services
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager
@inject IImagenService ImagenService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestionar Productos - KeyStore</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-semibold text-primary">KEYSTORE - Gestionar Productos</h3>
            <div class="d-flex gap-2">
                <a href="/Productos/Crear" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i> Crear Producto
                </a>
                <a href="/" class="btn btn-outline-secondary">
                    <i class="bi bi-house"></i> Volver al Inicio
                </a>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert @(esError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                @mensaje
                <button type="button" class="btn-close" @onclick="() => mensaje = string.Empty"></button>
            </div>
        }

        <ul class="nav nav-tabs mb-4" id="categoryTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link @(categoriaActiva == 1 ? "active" : "")"
                        @onclick="() => CambiarCategoria(1)" type="button">
                    <i class="bi bi-keyboard"></i> Teclados (@conteoTeclados)
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(categoriaActiva == 2 ? "active" : "")"
                        @onclick="() => CambiarCategoria(2)" type="button">
                    <i class="bi bi-mouse"></i> Mouse (@conteoMouse)
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(categoriaActiva == 3 ? "active" : "")"
                        @onclick="() => CambiarCategoria(3)" type="button">
                    <i class="bi bi-headphones"></i> Audífonos (@conteoAudifonos)
                </button>
            </li>
        </ul>

        <div class="row mb-4">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" placeholder="Buscar productos..."
                           @bind="textoBusqueda" @onkeypress="@(async (e) => { if (e.Key == "Enter") await BuscarProductos(); })">
                    <button class="btn btn-outline-primary" @onclick="BuscarProductos">Buscar</button>
                </div>
            </div>
            <div class="col-md-6 text-end">
                @if (productosSeleccionados.Any())
                {
                    <button class="btn btn-danger me-2" @onclick="EliminarSeleccionados" disabled="@eliminandoProductos">
                        @if (eliminandoProductos)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-trash"></i> Eliminar Seleccionados (@productosSeleccionados.Count)
                    </button>
                }
                <button class="btn btn-outline-secondary" @onclick="SeleccionarTodos">
                    <i class="bi bi-check-all"></i> @(todosSeleccionados ? "Deseleccionar" : "Seleccionar") Todos
                </button>
            </div>
        </div>

        <div class="tab-content">
            <div class="tab-pane fade show active">
                @if (productosFiltrados != null && productosFiltrados.Any())
                {
                    <div class="row">
                        @foreach (var producto in productosFiltrados)
                        {
                            <div class="col-md-6 col-lg-4 col-xl-3 mb-4">
                                <div class="card h-100 @(productosSeleccionados.Contains(producto.Id) ? "border-primary bg-light" : "")">
                                    <div class="position-relative">
                                        <div class="position-absolute top-0 start-0 p-2" style="z-index: 1;">
                                            <input type="checkbox" class="form-check-input"
                                                   checked="@productosSeleccionados.Contains(producto.Id)"
                                                   @onchange="@((e) => ToggleSeleccion(producto.Id, (bool)e.Value))">
                                        </div>

                                        <div class="card-img-top position-relative" style="height: 200px; overflow: hidden;">
                                            @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                                            {
                                                <img src="@producto.ImagenUrl" alt="@producto.Nombre"
                                                     class="w-100 h-100" style="object-fit: cover;">
                                            }
                                            else
                                            {
                                                <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                                                    <i class="bi bi-image text-muted" style="font-size: 2rem;"></i>
                                                </div>
                                            }

                                            <div class="position-absolute top-0 end-0 p-2">
                                                <span class="badge @(producto.Stock > 0 ? "bg-success" : "bg-danger")">
                                                    @(producto.Stock > 0 ? $"Stock: {producto.Stock}" : "Sin Stock")
                                                </span>
                                            </div>

                                            @if (producto.EsDestacado)
                                            {
                                                <div class="position-absolute bottom-0 start-0 p-2">
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-star-fill"></i> Destacado
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="card-body">
                                        <h6 class="card-title fw-bold">@producto.Nombre</h6>

                                        @if (!string.IsNullOrEmpty(producto.Marca))
                                        {
                                            <small class="text-muted d-block mb-1">
                                                <i class="bi bi-tag"></i> @producto.Marca
                                            </small>
                                        }

                                        <p class="card-text text-primary fw-bold fs-5 mb-2">
                                            $@producto.Precio.ToString("F2")
                                        </p>

                                        @if (!string.IsNullOrEmpty(producto.Descripcion))
                                        {
                                            <p class="card-text small text-muted">
                                                @(producto.Descripcion.Length > 80 ?
                                                    producto.Descripcion.Substring(0, 80) + "..." :
                                                    producto.Descripcion)
                                            </p>
                                        }

                                        <div class="mb-3">
                                            @if (producto.EsIluminado)
                                            {
                                                <span class="badge bg-info me-1 mb-1">
                                                    <i class="bi bi-lightbulb"></i> RGB
                                                </span>
                                            }
                                            @if (producto.EsInalámbrico)
                                            {
                                                <span class="badge bg-secondary me-1 mb-1">
                                                    <i class="bi bi-wifi"></i> Inalámbrico
                                                </span>
                                            }
                                            @if (producto.EsMecánico && producto.CategoriaId == 1)
                                            {
                                                <span class="badge bg-dark me-1 mb-1">
                                                    <i class="bi bi-gear"></i> Mecánico
                                                </span>
                                            }
                                        </div>
                                    </div>

                                    <div class="card-footer bg-transparent">
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-primary btn-sm flex-grow-1"
                                                    @onclick="() => EditarProducto(producto.Id)">
                                                <i class="bi bi-pencil"></i> Editar
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm"
                                                    @onclick="() => EliminarProducto(producto.Id)"
                                                    disabled="@eliminandoProductos">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    @if (totalPaginas > 1)
                    {
                        <nav aria-label="Navegación de productos">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual - 1)" disabled="@(paginaActual == 1)">
                                        Anterior
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, paginaActual - 2); i <= Math.Min(totalPaginas, paginaActual + 2); i++)
                                {
                                    int pagina = i;
                                    <li class="page-item @(paginaActual == pagina ? "active" : "")">
                                        <button class="page-link" @onclick="() => CambiarPagina(pagina)">
                                            @pagina
                                        </button>
                                    </li>
                                }

                                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual + 1)" disabled="@(paginaActual == totalPaginas)">
                                        Siguiente
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-box-seam display-1 text-muted"></i>
                        <h4 class="mt-3">No hay productos en esta categoría</h4>
                        <p class="text-muted">@ObtenerNombreCategoria(categoriaActiva) no tiene productos aún.</p>
                        <a href="/Productos/Crear" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Crear Primer Producto
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-dark">
                        <i class="bi bi-exclamation-triangle text-warning"></i>
                        Confirmar Eliminación
                    </h5>
                </div>
                <div class="modal-body text-dark">
                    @if (productosParaEliminar.Count == 1)
                    {
                        <p>¿Estás seguro que deseas eliminar este producto?</p>
                        <p><strong>Esta acción no se puede deshacer.</strong></p>
                    }
                    else
                    {
                        <p>¿Estás seguro que deseas eliminar <strong>@productosParaEliminar.Count productos</strong>?</p>
                        <p><strong>Esta acción no se puede deshacer.</strong></p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminacion">
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminacion" disabled="@eliminandoProductos">
                        @if (eliminandoProductos)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> todosLosProductos = new();
    private List<Producto> productosFiltrados = new();
    private HashSet<int> productosSeleccionados = new();
    private List<int> productosParaEliminar = new();

    private int categoriaActiva = 1;
    private string textoBusqueda = string.Empty;
    private bool isLoading = true;
    private bool eliminandoProductos = false;
    private bool mostrarModalEliminar = false;
    private string mensaje = string.Empty;
    private bool esError = false;

    private int conteoTeclados = 0;
    private int conteoMouse = 0;
    private int conteoAudifonos = 0;

    private int paginaActual = 1;
    private int productosPorPagina = 12;
    private int totalPaginas = 1;

    private bool todosSeleccionados => productosFiltrados.Any() &&
                                     productosFiltrados.All(p => productosSeleccionados.Contains(p.Id));

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CargarProductos();
        await ActualizarConteos();
        FiltrarProductos();
        isLoading = false;
    }

    private async Task CargarProductos()
    {
        try
        {
            todosLosProductos = await context.Productos
                .OrderBy(p => p.Nombre)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            mensaje = $"Error cargando productos: {ex.Message}";
            esError = true;
            todosLosProductos = new List<Producto>();
        }
    }

    private async Task ActualizarConteos()
    {
        conteoTeclados = todosLosProductos.Count(p => p.CategoriaId == 1);
        conteoMouse = todosLosProductos.Count(p => p.CategoriaId == 2);
        conteoAudifonos = todosLosProductos.Count(p => p.CategoriaId == 3);
        await Task.CompletedTask;
    }

    private void CambiarCategoria(int categoria)
    {
        categoriaActiva = categoria;
        paginaActual = 1;
        productosSeleccionados.Clear();
        FiltrarProductos();
    }

    private async Task BuscarProductos()
    {
        paginaActual = 1;
        productosSeleccionados.Clear();
        FiltrarProductos();
        await Task.CompletedTask;
    }

    private void FiltrarProductos()
    {
        var productos = todosLosProductos.Where(p => p.CategoriaId == categoriaActiva);

        if (!string.IsNullOrWhiteSpace(textoBusqueda))
        {
            productos = productos.Where(p =>
                p.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                (p.Marca?.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Descripcion?.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        var productosOrdenados = productos.OrderBy(p => p.Nombre).ToList();

        var totalProductos = productosOrdenados.Count;
        totalPaginas = (int)Math.Ceiling((double)totalProductos / productosPorPagina);

        if (paginaActual > totalPaginas && totalPaginas > 0)
            paginaActual = totalPaginas;

        productosFiltrados = productosOrdenados
            .Skip((paginaActual - 1) * productosPorPagina)
            .Take(productosPorPagina)
            .ToList();
    }

    private void CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas)
        {
            paginaActual = nuevaPagina;
            FiltrarProductos();
        }
    }

    private void ToggleSeleccion(int productoId, bool seleccionado)
    {
        if (seleccionado)
            productosSeleccionados.Add(productoId);
        else
            productosSeleccionados.Remove(productoId);
    }

    private void SeleccionarTodos()
    {
        if (todosSeleccionados)
        {
            foreach (var producto in productosFiltrados)
                productosSeleccionados.Remove(producto.Id);
        }
        else
        {
            foreach (var producto in productosFiltrados)
                productosSeleccionados.Add(producto.Id);
        }
    }

    private void EditarProducto(int productoId)
    {
        NavigationManager.NavigateTo($"/Productos/Editar/{productoId}");
    }

    private void EliminarProducto(int productoId)
    {
        productosParaEliminar = new List<int> { productoId };
        mostrarModalEliminar = true;
    }

    private void EliminarSeleccionados()
    {
        if (productosSeleccionados.Any())
        {
            productosParaEliminar = productosSeleccionados.ToList();
            mostrarModalEliminar = true;
        }
    }

    private void CancelarEliminacion()
    {
        mostrarModalEliminar = false;
        productosParaEliminar.Clear();
    }

    private async Task ConfirmarEliminacion()
    {
        if (!productosParaEliminar.Any()) return;

        try
        {
            eliminandoProductos = true;
            StateHasChanged();

            foreach (var productoId in productosParaEliminar)
            {
                var producto = await context.Productos.FindAsync(productoId);
                if (producto != null)
                {
                    if (!string.IsNullOrEmpty(producto.ImagenUrl))
                    {
                        try
                        {
                            await ImagenService.EliminarImagenAsync(producto.ImagenUrl);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error eliminando imagen: {ex.Message}");
                        }
                    }

                    context.Productos.Remove(producto);
                    productosSeleccionados.Remove(productoId);
                }
            }

            await context.SaveChangesAsync();

            mensaje = productosParaEliminar.Count == 1 ?
                "Producto eliminado correctamente." :
                $"{productosParaEliminar.Count} productos eliminados correctamente.";
            esError = false;

            await CargarProductos();
            await ActualizarConteos();
            FiltrarProductos();

            mostrarModalEliminar = false;
            productosParaEliminar.Clear();
        }
        catch (DbUpdateException dbEx)
        {
            var innerMessage = dbEx.InnerException?.Message ?? dbEx.Message;

            if (innerMessage.Contains("FOREIGN KEY") || innerMessage.Contains("REFERENCE"))
            {
                mensaje = "Error: No se pueden eliminar algunos productos porque están siendo usados en otras partes del sistema.";
            }
            else
            {
                mensaje = $"Error de base de datos: {innerMessage}";
            }

            esError = true;
            Console.WriteLine($"Error eliminando productos: {dbEx}");
        }
        catch (Exception ex)
        {
            mensaje = $"Error eliminando productos: {ex.Message}";
            esError = true;
            Console.WriteLine($"Error general: {ex}");
        }
        finally
        {
            eliminandoProductos = false;
            StateHasChanged();
        }
    }

    private string ObtenerNombreCategoria(int categoriaId)
    {
        return categoriaId switch
        {
            1 => "Teclados",
            2 => "Mouse",
            3 => "Audífonos",
            _ => "Categoría"
        };
    }
}