@page "/Home/Crear"
@using Microsoft.EntityFrameworkCore
@using KeyStore.DAL
@using KeyStore.Models
@inject IDbContextFactory<Contexto> DbContextFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Crear Elemento Home - KeyStore</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="elementoHome" OnValidSubmit="GuardarElemento">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container mt-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="fw-semibold text-primary">KEYSTORE - Gestión Home</h3>
                <a href="/" class="btn btn-outline-secondary">
                    <i class="bi bi-house"></i> Ver Home
                </a>
            </div>

            @if (!string.IsNullOrEmpty(mensaje))
            {
                <div class="alert @(esError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                    @mensaje
                    <button type="button" class="btn-close" @onclick="() => mensaje = string.Empty"></button>
                </div>
            }

            <div class="row mt-4">
                <div class="col-md-7">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <strong><i class="bi bi-plus-circle"></i> Crear Elemento para Home</strong>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label"><strong>ID</strong></label>
                                <InputNumber class="form-control" @bind-Value="elementoHome.Id" readonly />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Tipo de Elemento *</label>
                                <InputSelect class="form-select" @bind-Value="elementoHome.TipoElemento">
                                    <option value="">-- Selecciona un tipo --</option>
                                    <option value="Hero">Hero Principal</option>
                                    <option value="Categoria">Categoría</option>
                                    <option value="ProductoDestacado">Producto Destacado</option>
                                    <option value="Banner">Banner Promocional</option>
                                    <option value="SeccionAbout">Sección About Us</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => elementoHome.TipoElemento)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Título *</label>
                                <InputText class="form-control" @bind-Value="elementoHome.Titulo" placeholder="Ej: KEYSTORE, Teclados RGB, etc." />
                                <ValidationMessage For="@(() => elementoHome.Titulo)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Subtítulo</label>
                                <InputText class="form-control" @bind-Value="elementoHome.Subtitulo" placeholder="Subtítulo opcional" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Precio *</label>
                                <InputNumber class="form-control" @bind-Value="elementoHome.Precio" placeholder="0.00" step="0.01" />
                                <ValidationMessage For="@(() => elementoHome.Precio)" />
                                <small class="form-text text-muted">Precio del producto en formato decimal (ej: 99.99)</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Descripción</label>
                                <InputTextArea class="form-control" rows="4" @bind-Value="elementoHome.Descripcion"
                                               placeholder="Descripción detallada del elemento..." />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">URL de Enlace</label>
                                <InputText class="form-control" @bind-Value="elementoHome.UrlEnlace"
                                           placeholder="/productos, /categorias/1, https://..." />
                                <small class="form-text text-muted">URL de destino al hacer clic (opcional)</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Texto del Botón</label>
                                <InputText class="form-control" @bind-Value="elementoHome.TextoBoton"
                                           placeholder="Comprar Ahora, Ver Más, etc." />
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Orden de Visualización</label>
                                    <InputNumber class="form-control" @bind-Value="elementoHome.Orden" />
                                    <small class="form-text text-muted">Menor número = aparece primero</small>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Estado</label>
                                    <InputSelect class="form-select" @bind-Value="elementoHome.Activo">
                                        <option value="true">Activo</option>
                                        <option value="false">Inactivo</option>
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="mt-4 d-flex justify-content-center gap-2">
                                <a href="/Home/Index" class="btn btn-outline-danger">
                                    <i class="bi bi-arrow-left"></i> Volver
                                </a>
                                <button type="submit" class="btn btn-success" disabled="@guardando">
                                    @if (guardando)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-floppy"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                                    <i class="bi bi-plus"></i> Limpiar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-5">
                    <div class="card shadow-sm">
                        <div class="card-header bg-info text-white">
                            <strong><i class="bi bi-image"></i> Imagen del Elemento</strong>
                        </div>
                        <div class="card-body text-center">
                            @if (elementoHome.ImagenData != null && elementoHome.ImagenData.Length > 0)
                            {
                                <div class="mb-3">
                                    <img src="data:@elementoHome.TipoImagen;base64,@Convert.ToBase64String(elementoHome.ImagenData)"
                                         alt="Preview"
                                         class="img-fluid rounded shadow-sm border"
                                         style="max-height: 300px; max-width: 100%; object-fit: cover;" />
                                </div>
                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="EliminarImagen">
                                    <i class="bi bi-trash"></i> Eliminar Imagen
                                </button>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center bg-light rounded"
                                     style="height: 250px; border: 2px dashed #dee2e6;">
                                    <div class="text-center text-muted">
                                        <i class="bi bi-image display-1"></i>
                                        <p class="mt-2 mb-0">No hay imagen seleccionada</p>
                                        <small>Sube una imagen para el elemento</small>
                                    </div>
                                </div>
                            }

                            <div class="mt-3">
                                <label class="form-label fw-bold">Subir Nueva Imagen</label>
                                <InputFile OnChange="SubirImagen" class="form-control" accept="image/*" />
                                <small class="form-text text-muted">
                                    <i class="bi bi-info-circle"></i>
                                    Formatos: JPG, PNG, GIF | Máximo: 5MB
                                </small>
                            </div>

                            @if (!string.IsNullOrEmpty(mensajeImagen))
                            {
                                <div class="alert @(mensajeImagen.Contains("Error") ? "alert-danger" : "alert-info") mt-3" role="alert">
                                    <small>@mensajeImagen</small>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="card shadow-sm mt-3">
                        <div class="card-header bg-warning text-dark">
                            <strong><i class="bi bi-lightbulb"></i> Ayuda</strong>
                        </div>
                        <div class="card-body">
                            <small>
                                <strong>Tipos de elementos:</strong><br>
                                • <strong>Hero:</strong> Banner principal<br>
                                • <strong>Categoría:</strong> Tarjetas de categoría<br>
                                • <strong>Producto Destacado:</strong> Productos en home<br>
                                • <strong>Banner:</strong> Banners promocionales<br>
                                • <strong>About Us:</strong> Sección informativa
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    public ElementoHome elementoHome { get; set; } = new ElementoHome();
    private bool isLoading = true;
    private bool guardando = false;
    private string mensajeImagen = string.Empty;
    private string mensaje = string.Empty;
    private bool esError = false;


    private const long MaxFileSize = 5 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;


        elementoHome.FechaCreacion = DateTime.UtcNow;
        elementoHome.Activo = true;
        elementoHome.Orden = 1;
        elementoHome.Precio = 0.01m; 

        await Task.Delay(100);
        isLoading = false;
    }

    private async Task SubirImagen(InputFileChangeEventArgs e)
    {
        mensajeImagen = string.Empty;
        var archivo = e.File;

        if (archivo != null)
        {
  
            if (archivo.Size > MaxFileSize)
            {
                mensajeImagen = "Error: El archivo es demasiado grande. Máximo permitido: 5MB.";
                return;
            }

            // Validar tipo de archivo
            var tiposPermitidos = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif" };
            if (!tiposPermitidos.Contains(archivo.ContentType.ToLower()))
            {
                mensajeImagen = "Error: Tipo de archivo no soportado. Use JPG, PNG o GIF.";
                return;
            }

            try
            {
                using var stream = archivo.OpenReadStream(MaxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);

                elementoHome.ImagenData = memoryStream.ToArray();
                elementoHome.TipoImagen = archivo.ContentType;
                elementoHome.NombreImagen = archivo.Name;

                mensajeImagen = "Imagen cargada correctamente.";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                mensajeImagen = $"Error al cargar la imagen: {ex.Message}";
            }
        }
    }

    private void EliminarImagen()
    {
        elementoHome.ImagenData = null;
        elementoHome.TipoImagen = string.Empty;
        elementoHome.NombreImagen = string.Empty;
        mensajeImagen = "Imagen eliminada.";
        StateHasChanged();
    }

    public async Task GuardarElemento()
    {
        try
        {
            guardando = true;
            mensaje = string.Empty;
            StateHasChanged();


            if (string.IsNullOrWhiteSpace(elementoHome.Titulo))
            {
                mensaje = "Error: El título es requerido.";
                esError = true;
                return;
            }


            if (elementoHome.Precio <= 0)
            {
                mensaje = "Error: El precio debe ser mayor a 0.";
                esError = true;
                return;
            }

            elementoHome.TipoElemento = "Categoria";

            elementoHome.FechaCreacion = elementoHome.FechaCreacion.ToUniversalTime();
            elementoHome.FechaModificacion = DateTime.UtcNow;

            await using var contexto = await DbContextFactory.CreateDbContextAsync();

            if (elementoHome.Id == 0)
            {
                elementoHome.Id = 0;
                contexto.ElementosHome.Add(elementoHome);
            }
            else
            {
                contexto.ElementosHome.Update(elementoHome);
            }

            await contexto.SaveChangesAsync();

            mensaje = elementoHome.Id == 0 ?
                "Elemento creado exitosamente en la sección Productos." :
                "Elemento actualizado exitosamente.";
            esError = false;


            await Task.Delay(1500);
            if (!esError)
                Nuevo();
        }
        catch (DbUpdateException dbEx)
        {
            mensaje = $"Error de base de datos: {dbEx.InnerException?.Message ?? dbEx.Message}";
            esError = true;
        }
        catch (Exception ex)
        {
            mensaje = $"Error inesperado: {ex.Message}";
            esError = true;
        }
        finally
        {
            guardando = false;
            StateHasChanged();
        }
    }

    private void Nuevo()
    {
        elementoHome = new ElementoHome
            {
                FechaCreacion = DateTime.UtcNow,
                Activo = true,
                Orden = 1,
                Precio = 0.01m
            };
        mensajeImagen = string.Empty;
        mensaje = string.Empty;
        StateHasChanged();
    }
}