// <auto-generated />
using System;
using KeyStore.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeyStore.Migrations.ContextoMigrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250728030518_AgregarPropiedadesImagenSitio")]
    partial class AgregarPropiedadesImagenSitio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KeyStore.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EsActiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EsActiva");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("Orden");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Teclados con iluminación RGB personalizable",
                            EsActiva = true,
                            Nombre = "Teclados RGB",
                            Orden = 1
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Teclados mecánicos de alta calidad",
                            EsActiva = true,
                            Nombre = "Teclados Mecánicos",
                            Orden = 2
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Keycaps y temas únicos para personalizar tu teclado",
                            EsActiva = true,
                            Nombre = "Temas Personalizados",
                            Orden = 3
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Accesorios y complementos para teclados",
                            EsActiva = true,
                            Nombre = "Accesorios",
                            Orden = 4
                        });
                });

            modelBuilder.Entity("KeyStore.Models.ElementoHome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImagenData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NombreImagen")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Subtitulo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TextoBoton")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoElemento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoImagen")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlEnlace")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Activo");

                    b.HasIndex("Orden");

                    b.HasIndex("TipoElemento");

                    b.ToTable("ElementosHome");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Descubre nuestra colección exclusiva de teclados mecánicos, temas personalizados y accesorios premium para elevar tu experiencia de escritura y gaming.",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(3816),
                            Orden = 1,
                            Precio = 99.99m,
                            Subtitulo = "Teclados Personalizados de Alta Calidad",
                            TextoBoton = "Comprar Ahora",
                            TipoElemento = "Hero",
                            Titulo = "KEYSTORE",
                            UrlEnlace = "/productos"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Nuestra misión es brindar experiencias de teclado personalizadas para todos. Conoce más sobre nuestro viaje y nuestra dedicación a la calidad e innovación.",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(4084),
                            Orden = 10,
                            Precio = 0.01m,
                            Subtitulo = "Nuestra Pasión por los Teclados",
                            TextoBoton = "Learn more",
                            TipoElemento = "SeccionAbout",
                            Titulo = "About Us",
                            UrlEnlace = "/about"
                        });
                });

            modelBuilder.Entity("KeyStore.Models.ImagenSitio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<int?>("Alto")
                        .HasColumnType("int")
                        .HasColumnName("Alto");

                    b.Property<int?>("Ancho")
                        .HasColumnType("int")
                        .HasColumnName("Ancho");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImagenData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreArchivo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ObjectFit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("cover");

                    b.Property<bool>("OcultarFondo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TipoImagen")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activa");

                    b.HasIndex("Clave")
                        .IsUnique();

                    b.ToTable("ImagenesSitio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activa = true,
                            Clave = "hero-keyboard",
                            Descripcion = "Imagen principal del hero que aparece en la página de inicio junto al título KEYSTORE",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(5568),
                            Nombre = "Teclado Mecánico Principal - Hero",
                            ObjectFit = "cover",
                            OcultarFondo = true
                        },
                        new
                        {
                            Id = 2,
                            Activa = true,
                            Clave = "about-image",
                            Descripcion = "Imagen de setup gaming que aparece en la sección About Us",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(6142),
                            Nombre = "Setup Gaming - About Us",
                            ObjectFit = "cover",
                            OcultarFondo = false
                        },
                        new
                        {
                            Id = 3,
                            Activa = true,
                            Clave = "product-1",
                            Descripcion = "Primera imagen de producto destacado en la sección featured",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(6144),
                            Nombre = "Producto Destacado 1",
                            ObjectFit = "cover",
                            OcultarFondo = false
                        },
                        new
                        {
                            Id = 4,
                            Activa = true,
                            Clave = "product-2",
                            Descripcion = "Segunda imagen de producto destacado en la sección featured",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(6145),
                            Nombre = "Producto Destacado 2",
                            ObjectFit = "cover",
                            OcultarFondo = false
                        },
                        new
                        {
                            Id = 5,
                            Activa = true,
                            Clave = "product-3",
                            Descripcion = "Tercera imagen de producto destacado en la sección featured",
                            FechaCreacion = new DateTime(2025, 7, 28, 3, 5, 17, 367, DateTimeKind.Utc).AddTicks(6147),
                            Nombre = "Producto Destacado 3",
                            ObjectFit = "cover",
                            OcultarFondo = false
                        });
                });

            modelBuilder.Entity("KeyStore.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("ColorPrincipal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("EsDestacado")
                        .HasColumnType("bit");

                    b.Property<bool>("EsIluminado")
                        .HasColumnType("bit");

                    b.Property<bool>("EsInalámbrico")
                        .HasColumnType("bit");

                    b.Property<bool>("EsMecánico")
                        .HasColumnType("bit");

                    b.Property<bool>("EsTemaPersonalizado")
                        .HasColumnType("bit");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagenesSecundarias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreTema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("TipoConexion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoSwitch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EsDestacado");

                    b.HasIndex("Marca");

                    b.HasIndex("Nombre");

                    b.HasIndex("Stock");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            ColorPrincipal = "Negro",
                            Descripcion = "Teclado mecánico profesional con switches Cherry MX Red y retroiluminación RGB completa. Perfecto para gaming y trabajo.",
                            EsDestacado = true,
                            EsIluminado = true,
                            EsInalámbrico = false,
                            EsMecánico = true,
                            EsTemaPersonalizado = false,
                            ImagenUrl = "/images/keyboard-rgb-1.jpg",
                            ImagenesSecundarias = "[]",
                            Layout = "Español",
                            Marca = "KeyStore",
                            Modelo = "RGB-PRO-001",
                            Nombre = "Teclado RGB Gaming Pro",
                            NombreTema = "",
                            Precio = 89.99m,
                            Stock = 15,
                            TipoConexion = "USB_C",
                            TipoSwitch = "Rojo_Linear"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 3,
                            ColorPrincipal = "Amarillo/Negro",
                            Descripcion = "Set completo de keycaps inspirado en el universo de Cyberpunk 2077. Incluye teclas especiales y colores únicos.",
                            EsDestacado = true,
                            EsIluminado = false,
                            EsInalámbrico = false,
                            EsMecánico = false,
                            EsTemaPersonalizado = true,
                            ImagenUrl = "/images/cyberpunk-theme.jpg",
                            ImagenesSecundarias = "[]",
                            Layout = "Universal",
                            Marca = "KeyStore",
                            Modelo = "THEME-CP77",
                            Nombre = "Tema Cyberpunk 2077",
                            NombreTema = "Cyberpunk",
                            Precio = 45.99m,
                            Stock = 8,
                            TipoConexion = "USB_A",
                            TipoSwitch = "Azul_Tactil"
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 2,
                            ColorPrincipal = "Blanco",
                            Descripcion = "Teclado mecánico inalámbrico premium con conexión Bluetooth 5.0 y batería de larga duración.",
                            EsDestacado = false,
                            EsIluminado = true,
                            EsInalámbrico = true,
                            EsMecánico = true,
                            EsTemaPersonalizado = false,
                            ImagenUrl = "/images/wireless-mechanical.jpg",
                            ImagenesSecundarias = "[]",
                            Layout = "Internacional",
                            Marca = "KeyStore",
                            Modelo = "WRL-ELITE-001",
                            Nombre = "Teclado Mecánico Wireless Elite",
                            NombreTema = "",
                            Precio = 125.99m,
                            Stock = 12,
                            TipoConexion = "Bluetooth",
                            TipoSwitch = "Marron_Tactil_Silencioso"
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 4,
                            ColorPrincipal = "Rojo/Dorado",
                            Descripcion = "Set de keycaps artesanales con diseño de dragón, perfectos para personalizar tu teclado mecánico.",
                            EsDestacado = true,
                            EsIluminado = false,
                            EsInalámbrico = false,
                            EsMecánico = false,
                            EsTemaPersonalizado = true,
                            ImagenUrl = "/images/dragon-keycaps.jpg",
                            ImagenesSecundarias = "[]",
                            Layout = "Universal",
                            Marca = "KeyStore",
                            Modelo = "ART-DRAGON-001",
                            Nombre = "Keycaps Artisan Dragon",
                            NombreTema = "Dragon",
                            Precio = 35.99m,
                            Stock = 20,
                            TipoConexion = "USB_A",
                            TipoSwitch = "Azul_Tactil"
                        });
                });

            modelBuilder.Entity("KeyStore.Models.Producto", b =>
                {
                    b.HasOne("KeyStore.Models.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
